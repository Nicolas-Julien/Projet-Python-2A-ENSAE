{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Utiliser la Data Science pour prédire l'issue de matchs de football :\n",
    "\n",
    "L'objectif de ce projet va être de prédire les résultat de matchs de football de Ligue 1 à partir d'une base de données contenant tous les matchs effectués dans ce championnat depuis 2016.\n",
    "\n",
    "Pour tester la qualité de notre prédiction, nous n'allons pas seulement regarder les indicateurs métriques classiques proposés par Skicit-Learn, mais allons tester nos resultats d'une manière plus concrète : notre dataset contient, entre autres, les côtes proposées par les sites de paris sportifs. Cela va pouvoir nous indiquer si nous prédisons mieux les matchs que les bookmakers, en regardant directement notre rentabilité (plus de détails en partie 2). \n",
    "\n",
    "Nous pourrons voir si nos résultats sont concrètement exploitables, lucrativement parlant.\n",
    "Peut-on gagner de l'argent dans les paris sportifs grâce aux modèles statistiques de prédiction ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partie 1 : Construction du modèle \n",
    "\n",
    "### A) Appropriation des données\n",
    "\n",
    "Commençons par importer notre dataset : celui-ci est en réalité constitué de 4 data-sets intérmédiaires (correspondant aux resultats de championnat pour chaque année) que nous allons concaténer par la suite."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 385
    },
    "id": "sdM_Ib4w_UJK",
    "outputId": "01571557-7478-4f22-faae-0113c4b89783"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Div</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTR</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HTR</th>\n",
       "      <th>...</th>\n",
       "      <th>AvgC&lt;2.5</th>\n",
       "      <th>AHCh</th>\n",
       "      <th>B365CAHH</th>\n",
       "      <th>B365CAHA</th>\n",
       "      <th>PCAHH</th>\n",
       "      <th>PCAHA</th>\n",
       "      <th>MaxCAHH</th>\n",
       "      <th>MaxCAHA</th>\n",
       "      <th>AvgCAHH</th>\n",
       "      <th>AvgCAHA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F1</td>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F1</td>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Guingamp</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>H</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>F1</td>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>2.38</td>\n",
       "      <td>0.25</td>\n",
       "      <td>2.06</td>\n",
       "      <td>1.87</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1415</th>\n",
       "      <td>F1</td>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>1.54</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.02</td>\n",
       "      <td>1.89</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.93</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1416</th>\n",
       "      <td>F1</td>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>1.61</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>2.03</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.98</td>\n",
       "      <td>1.94</td>\n",
       "      <td>1.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>F1</td>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>1.60</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.96</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.94</td>\n",
       "      <td>1.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1418</th>\n",
       "      <td>F1</td>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>1.70</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>1.89</td>\n",
       "      <td>2.04</td>\n",
       "      <td>1.89</td>\n",
       "      <td>2.02</td>\n",
       "      <td>1.97</td>\n",
       "      <td>2.06</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1419 rows × 126 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Div        Date    HomeTeam     AwayTeam  FTHG  FTAG FTR  HTHG  HTAG HTR  \\\n",
       "0     F1    12/08/16      Bastia     Paris SG     0     1   A   0.0   0.0   D   \n",
       "1     F1    12/08/16      Monaco     Guingamp     2     2   D   0.0   2.0   A   \n",
       "2     F1    13/08/16    Bordeaux   St Etienne     3     2   H   1.0   0.0   H   \n",
       "3     F1    13/08/16        Caen      Lorient     3     2   H   2.0   2.0   D   \n",
       "4     F1    13/08/16       Dijon       Nantes     0     1   A   0.0   0.0   D   \n",
       "...   ..         ...         ...          ...   ...   ...  ..   ...   ...  ..   \n",
       "1414  F1  07/03/2020        Nice       Monaco     2     1   H   0.0   1.0   A   \n",
       "1415  F1  07/03/2020       Reims        Brest     1     0   H   1.0   0.0   H   \n",
       "1416  F1  08/03/2020  St Etienne     Bordeaux     1     1   D   0.0   0.0   D   \n",
       "1417  F1  08/03/2020      Rennes  Montpellier     5     0   H   2.0   0.0   H   \n",
       "1418  F1  08/03/2020       Lille         Lyon     1     0   H   1.0   0.0   H   \n",
       "\n",
       "      ...  AvgC<2.5  AHCh  B365CAHH  B365CAHA  PCAHH  PCAHA  MaxCAHH  MaxCAHA  \\\n",
       "0     ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "1     ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "2     ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "3     ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "4     ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "...   ...       ...   ...       ...       ...    ...    ...      ...      ...   \n",
       "1414  ...      2.38  0.25      2.06      1.87   2.07   1.85     2.09     1.90   \n",
       "1415  ...      1.54 -0.50      2.01      1.92   2.02   1.89     2.05     1.93   \n",
       "1416  ...      1.61 -0.25      2.03      1.90   2.00   1.92     2.07     1.98   \n",
       "1417  ...      1.60 -0.25      1.97      1.96   1.97   1.95     2.00     2.00   \n",
       "1418  ...      1.70 -0.25      1.89      2.04   1.89   2.02     1.97     2.06   \n",
       "\n",
       "      AvgCAHH  AvgCAHA  \n",
       "0         NaN      NaN  \n",
       "1         NaN      NaN  \n",
       "2         NaN      NaN  \n",
       "3         NaN      NaN  \n",
       "4         NaN      NaN  \n",
       "...       ...      ...  \n",
       "1414     2.01     1.84  \n",
       "1415     1.99     1.86  \n",
       "1416     1.94     1.91  \n",
       "1417     1.94     1.91  \n",
       "1418     1.87     1.98  \n",
       "\n",
       "[1419 rows x 126 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "data_ligue_1_2020 = pd.read_csv(\"https://www.football-data.co.uk/mmz4281/2021/F1.csv\") # Nous importons ce dataset mais ne l'utiliserons qu'en partie 2. \n",
    "# C'est celui sur lequel nous allons tester la rentabilité de notre modèle, donc il faut faire attention à ne pas biaiser nos prédictions en l'incluant dans les données d'apprentissage.\n",
    "# On ne peut pas juste prendre les X_test classiques, car nos observations ne sont pas du tout indépendantes. Ainsi, pour s'assurer que nos estimateurs seront\n",
    "#corrects, nous préférons prendre cette précaution.\n",
    "\n",
    "data_ligue_1_2019 = pd.read_csv(\"https://www.football-data.co.uk/mmz4281/1920/F1.csv\")\n",
    "data_ligue_1_2018 = pd.read_csv(\"https://www.football-data.co.uk/mmz4281/1819/F1.csv\")\n",
    "data_ligue_1_2017 = pd.read_csv(\"https://www.football-data.co.uk/mmz4281/1718/F1.csv\")\n",
    "data_ligue_1_2016 = pd.read_csv(\"https://www.football-data.co.uk/mmz4281/1617/F1.csv\")\n",
    "df = pd.concat([data_ligue_1_2016, data_ligue_1_2017, data_ligue_1_2018, data_ligue_1_2019]) # On concatène les données des différentes années\n",
    "df = df.set_index(np.arange(len(df))) # On établit un nouvel indice qui permettra d'éviter les doublons (auparavant, l'indice correspondait au numéro du match dans une année seulement)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gBVjzaH1Br6d"
   },
   "source": [
    "On commence par remarquer qu'il y a beaucoup de colonnes : 126 pour être précis. Les 1419 lignes correspondent aux 1419 matchs joués entre août 2016 et mars 2020.\n",
    "\n",
    "Cependant, dans ces 105 colonnes, le nombres de colonnes qui nous intéresse est finalement assez faible : les 5 premières nous donnent le contexte du match, et les données conçernent les paris sportifs dès la 24ème ligne (ce que nous n'allons pas utiliser dans un premier temps).\n",
    "\n",
    "Précisons notre problématique : idéalement, nous voudrions utiliser nos résultats afin d'effectuer des paris sportifs. Ainsi, il faut absolument que nos données afin de prédire un match ne se basent que sur les informations dont nous disposons avant la réalisation de ce match. \n",
    "\n",
    "Nous allons donc devoir retravailler nos données afin que sur les lignes de chaque match, nous ayont à disposition toutes les informations ante match, et c'est à partir de ces variables que nous construirons un modèle de prédiction.\n",
    "\n",
    "Nous devons donc choisir de manière arbitraire quelles sont les variables qui nous paraissent les plus intéréssantes afin de prédire l'issue d'un match. Commençons avec quatre variables : \n",
    "- le nombre de points de l'equipe à domicile AVANT de jouer le match\n",
    "- le nombre de points de l'equipe à l'extérieur AVANT de jouer le match\n",
    "- la forme de l'equipe à domicile AVANT de jouer le match\n",
    "- la forme de l'equipe à domicile AVANT de jouer le match\n",
    "\n",
    "Commençons par sélectionner les colonnes qui nous intéressent dans le dataset orignel afin de créer notre nouveau dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "id": "2GLYN0InF9Gy",
    "outputId": "db7977c6-9efa-4f49-a050-2bf7b89e9176"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Guingamp</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1415</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1416</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1418</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1419 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam FTR\n",
       "0       12/08/16      Bastia     Paris SG   A\n",
       "1       12/08/16      Monaco     Guingamp   D\n",
       "2       13/08/16    Bordeaux   St Etienne   H\n",
       "3       13/08/16        Caen      Lorient   H\n",
       "4       13/08/16       Dijon       Nantes   A\n",
       "...          ...         ...          ...  ..\n",
       "1414  07/03/2020        Nice       Monaco   H\n",
       "1415  07/03/2020       Reims        Brest   H\n",
       "1416  08/03/2020  St Etienne     Bordeaux   D\n",
       "1417  08/03/2020      Rennes  Montpellier   H\n",
       "1418  08/03/2020       Lille         Lyon   H\n",
       "\n",
       "[1419 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = df[['Date','HomeTeam', 'AwayTeam', 'FTR']]# FTR pour \"Full-Time-Result\"\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ADjTrcRtLXNJ"
   },
   "source": [
    "Nous obtenons déjà quelque chose de plus épuré. On remarque que le résultat est exprimé avec une lettre : transformons nos données afin que le résultat de chaque match devienne une variable Y discrète, prenant la valeur 3 si l'équipe à domicile gagne, 1 si match nul et 0 si c'est l'équipe à l'extérieur qui l'emporte. Cela correspond aux points attribués à l'équipe à domicile à l'issue du match. Cela nous permettra d'utiliser des outils de classification sur Y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "id": "n2SU0-mLMGy2",
    "outputId": "5bdfef5e-2af7-4625-bf1c-a1fc33f1a1ca"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Guingamp</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1415</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1416</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1418</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1419 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam  Result\n",
       "0       12/08/16      Bastia     Paris SG       0\n",
       "1       12/08/16      Monaco     Guingamp       1\n",
       "2       13/08/16    Bordeaux   St Etienne       3\n",
       "3       13/08/16        Caen      Lorient       3\n",
       "4       13/08/16       Dijon       Nantes       0\n",
       "...          ...         ...          ...     ...\n",
       "1414  07/03/2020        Nice       Monaco       3\n",
       "1415  07/03/2020       Reims        Brest       3\n",
       "1416  08/03/2020  St Etienne     Bordeaux       1\n",
       "1417  08/03/2020      Rennes  Montpellier       3\n",
       "1418  08/03/2020       Lille         Lyon       3\n",
       "\n",
       "[1419 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = df.rename(columns = {'FTR': 'Result'})\n",
    "\n",
    "def Resultat(r):\n",
    "  if r == 'H':\n",
    "    return(3)\n",
    "  elif r=='D':\n",
    "    return(1)\n",
    "  else :\n",
    "    return(0)\n",
    "\n",
    "df['Result'] = df['Result'].apply(Resultat)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B_Co9ex_nkeB"
   },
   "source": [
    "Nous pouvons alors déjà essayer de faire des statistiques descriptives sur notre DataFrame. Nous pouvons commencer à regarder la répartition de nos résultats, par exemple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 280
    },
    "id": "ONN868l9njjx",
    "outputId": "6519e22e-20aa-4510-835d-f89390e3220b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "df['Result'].hist(bins=15)\n",
    "plt.title('Repartition des résultats du championnat')\n",
    "plt.xlabel(\"Resultat\")\n",
    "plt.ylabel('Nombre de matchs', size=15)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sqm-SnJ-3Qcd"
   },
   "source": [
    "On remarque qu'une équipe gagne en moyenne la moitié de ses matchs à domicile, ce qui montre bien que jouer dans son propre stade, avec ses supporters, confère un avantage à une équipe (sinon au aurait plutôt du 33%). Il sera important de garder cette propriété en tête durant toute la suite du projet.\n",
    "\n",
    "Le nombre de défaites et de nuls et quant à lui à peu près le même.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 258
    },
    "id": "xUZ6Qwwl3RN8",
    "outputId": "8b228639-f421-4794-c1a0-edf5cc5fdddb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1419.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.649753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.306630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Result\n",
       "count  1419.000000\n",
       "mean      1.649753\n",
       "std       1.306630\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       1.000000\n",
       "75%       3.000000\n",
       "max       3.000000"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On retrouve bien nos 1419 observations : on remarque que la moyenne de points pris à domicile est de 1.69 points, avec un écart-type assez important. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Gflsxoxlf1JO"
   },
   "source": [
    "\n",
    "Passons maintenant à la création de nos nouvelles colonnes.\n",
    "Celles- ci, sont rappelons-le : \n",
    "\n",
    "*   Le nombre de points de l'equipe à domicile AVANT de jouer le match\n",
    "*   Le nombre de points de l'equipe à l'extérieur AVANT de jouer le match\n",
    "*   La forme de l'equipe à domicile AVANT de jouer le match\n",
    "*   La forme de l'equipe à domicile AVANT de jouer le match\n",
    "\n",
    "Or, dans notre DataFrame, nous ne disposons que du résultat associé à chaque match. Nous allons donc devoir nous servir de l'historique des matchs et des résultats pour pouvoir recréer des colonnes qui dépendraient de tout ce qu'il s'est passé avant chaque match.\n",
    "\n",
    "Commençons par le nombre de points des equipes : nous allons plutôt prendre le nombre de points **moyen** obtenu par chaque équipe : cela nous permettra de \"normaliser\" nos données afin que les coefficients puissent rester cohérents.\n",
    " \n",
    "Nous voulions tout d'abord essayer de passer par des groupby, mais un problème se pose à nous : il faut à la fois compter les points d'une equipe quand celle-ci joue à domicile et quand celle-ci joue à l'éxterieur. \n",
    "\n",
    "Il faudrait donc créer un nouveau data frame en inversant HomeTeam et AwayTeam puis le mixer avec notre premier dataframe, pour enfin lui appliquer une dérivée de cusum qui consisterai en un cummean, fonction qui n'existe pas dans pandas.\n",
    "\n",
    " La tâche nous semble compliquée, même si en creusant plus en profondeur nous pourrions peut-être abouttir, en témoigne ce premier essai concluant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 193
    },
    "id": "GI83I8v7GVyT",
    "outputId": "e12673f1-9949-4ecb-e8a8-7aa28a9b924d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         0\n",
       "1         1\n",
       "2         3\n",
       "3         3\n",
       "4         0\n",
       "       ... \n",
       "1414    141\n",
       "1415     53\n",
       "1416    120\n",
       "1417    124\n",
       "1418    126\n",
       "Name: Result, Length: 1419, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df.groupby('HomeTeam')['Result'].cumsum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3IyZ4ndg7bdl"
   },
   "source": [
    "Nous allons donc procéder à l'aide de boucles for, dans un soucis de simplicité. Commençons d'abord à créer les colonnes des nombres de points des deux equipes avant le match."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 438
    },
    "id": "FUfgOOp_7a8s",
    "outputId": "d9ecafe4-5f98-46cf-bd7f-c8dfe1cf670d",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:671: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>0</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Guingamp</td>\n",
       "      <td>1</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>3</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>3</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>3</td>\n",
       "      <td>1.409741</td>\n",
       "      <td>1.463475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1415</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>3</td>\n",
       "      <td>1.408782</td>\n",
       "      <td>1.263929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1416</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>1.097476</td>\n",
       "      <td>1.324588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>3</td>\n",
       "      <td>1.727583</td>\n",
       "      <td>1.483823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1418</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.712459</td>\n",
       "      <td>1.496378</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1419 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam  Result  PtsHomeTeam  PtsAwayTeam\n",
       "0       12/08/16      Bastia     Paris SG       0     1.390000     1.390000\n",
       "1       12/08/16      Monaco     Guingamp       1     1.390000     1.390000\n",
       "2       13/08/16    Bordeaux   St Etienne       3     1.390000     1.390000\n",
       "3       13/08/16        Caen      Lorient       3     1.390000     1.390000\n",
       "4       13/08/16       Dijon       Nantes       0     1.390000     1.390000\n",
       "...          ...         ...          ...     ...          ...          ...\n",
       "1414  07/03/2020        Nice       Monaco       3     1.409741     1.463475\n",
       "1415  07/03/2020       Reims        Brest       3     1.408782     1.263929\n",
       "1416  08/03/2020  St Etienne     Bordeaux       1     1.097476     1.324588\n",
       "1417  08/03/2020      Rennes  Montpellier       3     1.727583     1.483823\n",
       "1418  08/03/2020       Lille         Lyon       3     1.712459     1.496378\n",
       "\n",
       "[1419 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['PtsHomeTeam'] = np.zeros(len(df)) # Création des nouvelles colonnes que nous allons remplir avec des boucles\n",
    "df['PtsAwayTeam'] = np.zeros(len(df))\n",
    "\n",
    "for team in df.drop_duplicates(['HomeTeam'])['HomeTeam']: # Nous procédons équipe par équipe\n",
    "  \n",
    "  average_pts_team = 1.39 # On initilise à 1.39, qui est le nombre moyen de points pris par match en moyenne dans tout le championnat. \n",
    "  # En effet, en commençant, on ne sait rien sur aucun équipe, à part que celle-ci joue en Ligue 1 et a donc en moyenne pris 1.39 point en moyenne lors de ses derniers matchs.\n",
    "  # (C'est différent de notre 1.65 obtenu avec describe(), qui correspond au nombre moyen de points pris à domicile.)\n",
    "\n",
    "  nb_matches = 1 # On considère que ce 1.39 correspond à un match \"genèse\". On fixe donc le compteur à 1.\n",
    "\n",
    "  for k in range(len(df)): # Pour chaque équipe, on parcourt le dataframe pour compter ses points. Le nombre d'equipes étant faible, nous pouvons nous le permettre sans que cela prenne un temps d'exécution trop long.\n",
    "\n",
    "    if df['HomeTeam'].iloc[k] == team : \n",
    "      \n",
    "      df['PtsHomeTeam'].iloc[k] = average_pts_team # on remplit la colonne du dataframe correpondante\n",
    "       \n",
    "      r = df['Result'].iloc[k] # on extrait le résultat afin de préparer le prochain remplissage de colonne\n",
    "\n",
    "      average_pts_team = (average_pts_team*nb_matches + r)/(nb_matches+1) # à l'aide du résultat, on obtient le prochain nombre de points moyen qui viendra\n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "    \n",
    "    if df['AwayTeam'].iloc[k] == team : # Pour chaque equipe on doit tester la colonne domicile ET la colonne extérieur pour bien compter tous les points au fur et à mesure.\n",
    "      \n",
    "      df['PtsAwayTeam'].iloc[k] = average_pts_team\n",
    "\n",
    "      r = df['Result'].iloc[k]\n",
    "\n",
    "      pts = (1/2)*r**2 - (5/2)*r + 3 # Attention, il faut bien appliquer une fonction à r car ici on compte les points de l'equipe à l'extérieur. Cette fonction est la fonction la plus simple vérifiant f(3)=0, f(1)=1, f(0)=3.\n",
    "      \n",
    "      average_pts_team = (average_pts_team*nb_matches + pts)/(nb_matches+1) \n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "\n",
    "    if nb_matches >= 39 : \n",
    "      nb_matches = 1 \n",
    "\n",
    "      # Les deux dernières lignes servent à réinitialiser le nombre de points obtenus. En effet, à la fin de chaque championnat, une équipe change beaucoup avec le marché des transferts.\n",
    "      # Chaque equipe joue 38 matchs en une anné de championnat (sauf en 2019 à cause du covid où le championnat s'est arrêté prématurément, mais ça n'a pas d'impact ici)\n",
    "      # Au bout de 38 matchs, on réinitalise le compteur. Ici, il faut que nb_matches >= 39 comme on a commencé à 1.\n",
    "\n",
    "      # Cependant, le compteur n'est pas totalement réinitailisé à proprement parler. En effet, si on voulait faire totalement table rase du passé,\n",
    "      # On entrerait n = 0 en initialisation et à la fin du programme. Ici, ce n = 1 permet de garder un lien d'une saison à l'autre : tout ce qu'il s'est passé\n",
    "      # en 2018 se matérialisera sous la forme d'un match supplémentaire en 2019 dans le comptage de la moyenne par match. Il permet de faire le lien d'une saison à l'autre.\n",
    "      \n",
    "      # Pourquoi fait-on cela ? Une saison de championnat n'est pas totalement indépendante de la précédente, et donc symboliser le championnat de 2018 sous la forme d'un match 0 de la saison 2019\n",
    "      # permet de rendre compte de cette continuité entre les saisons : les équipes ne sont pas totalement renouvelées d'une saison à l'autre, les entraineurs, le budget, le fonctionnement du club\n",
    "      # restent les mêmes. \n",
    "\n",
    "      # Au final, cela permettra à notre modèle d'avoir des données plus réalistes. Repartir de 0 à chaque nouvelle saison rendrait notre modèle final moins précis.\n",
    "      # Cependant, nous avons ici choisi de pondérer l'année passée à un seul match, ce qui finalement a un effet assez faible sur nos resultats.\n",
    "    \n",
    "display(df)\n",
    "\n",
    "# Les données que nous obtenons diffèrent donc légèrement des indicateurs utilisés sur Internet.\n",
    "# Nous avons tout de même bien vérifié que ce programme fonctionne en reproduisant certains calculs \"à la main\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YTbktcW7eDmk"
   },
   "source": [
    "On remarque qu'au début des colonnes, nous obtenons des 1,39 pour tout le monde : c'est ce à quoi on s'attendait au vu de notre initialisation. On remarque que les valeurs varient entre 1.8 et 1 à la fin du championnat : c'est plutôt normal aussi comme il est très rare qu'une équipe gagne ou perde tous ses matchs sur toute la durée d'un championnat, comme il s'agit d'une moyenne, la variance est plus faible. \n",
    "\n",
    "Maintenant, essayons d'implémenter des colonnes qui renvoient les états de forme des deux équipes. En effet, la moyenne des points obtenus par match sur une saison est finalement une donnée assez faible. Il peut arriver que l'equipe sois en manque de confiance, que l'entraîneur d'une équipe change, que la tactique change...et ces faits qui jouent sur le court-terme peuvent en partie être renvoyés par cet indicateur de forme des équipes. \n",
    "\n",
    "Ici, nous allons considérer que la forme d'une équipe correspond aux points moyens obtenus par match uniquement sur ses 5 derniers matchs. (5 étant un nombre abritraire, mais généralement celui choisi pour toutes les analyses dans le milieu).\n",
    "\n",
    "Pour implémenter ces colonnes, encore plus complexes que les précédentes, il nous semble inévitable de repasser par des boucles for."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 438
    },
    "id": "wbdWk82xj6AF",
    "outputId": "f9b9950d-6f1f-446a-fc43-a32008285237"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:671: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>0</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12/08/16</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Guingamp</td>\n",
       "      <td>1</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>3</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>3</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13/08/16</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>3</td>\n",
       "      <td>1.409741</td>\n",
       "      <td>1.463475</td>\n",
       "      <td>1.20</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1415</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>3</td>\n",
       "      <td>1.408782</td>\n",
       "      <td>1.263929</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1416</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>1.097476</td>\n",
       "      <td>1.324588</td>\n",
       "      <td>0.20</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1417</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>3</td>\n",
       "      <td>1.727583</td>\n",
       "      <td>1.483823</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1418</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.712459</td>\n",
       "      <td>1.496378</td>\n",
       "      <td>2.40</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1419 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam  Result  PtsHomeTeam  PtsAwayTeam  \\\n",
       "0       12/08/16      Bastia     Paris SG       0     1.390000     1.390000   \n",
       "1       12/08/16      Monaco     Guingamp       1     1.390000     1.390000   \n",
       "2       13/08/16    Bordeaux   St Etienne       3     1.390000     1.390000   \n",
       "3       13/08/16        Caen      Lorient       3     1.390000     1.390000   \n",
       "4       13/08/16       Dijon       Nantes       0     1.390000     1.390000   \n",
       "...          ...         ...          ...     ...          ...          ...   \n",
       "1414  07/03/2020        Nice       Monaco       3     1.409741     1.463475   \n",
       "1415  07/03/2020       Reims        Brest       3     1.408782     1.263929   \n",
       "1416  08/03/2020  St Etienne     Bordeaux       1     1.097476     1.324588   \n",
       "1417  08/03/2020      Rennes  Montpellier       3     1.727583     1.483823   \n",
       "1418  08/03/2020       Lille         Lyon       3     1.712459     1.496378   \n",
       "\n",
       "      FormHomeTeam  FormAwayTeam  \n",
       "0             1.39          1.39  \n",
       "1             1.39          1.39  \n",
       "2             1.39          1.39  \n",
       "3             1.39          1.39  \n",
       "4             1.39          1.39  \n",
       "...            ...           ...  \n",
       "1414          1.20          2.20  \n",
       "1415          1.20          1.20  \n",
       "1416          0.20          1.20  \n",
       "1417          1.40          1.40  \n",
       "1418          2.40          1.60  \n",
       "\n",
       "[1419 rows x 8 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['FormHomeTeam'] = np.zeros(len(df))\n",
    "\n",
    "df['FormAwayTeam'] = np.zeros(len(df)) # Comme la dernière fois, on commence par créer des colonnes vierges pour accueillir nos données.\n",
    "\n",
    "for team in df.drop_duplicates(['HomeTeam'])['HomeTeam']: # Une fois de plus on procède équipe par équipe.\n",
    "\n",
    "  last_results = 1.39*np.ones(5) # Pour chaque équipe, on créée un vecteur qui retrace ses 5 derniers resultats.\n",
    "  # Comme la dernière fois, on initilise à 1,39, qui est le nombre moyen de points pris par match en moyenne dans tout le championnat.\n",
    "\n",
    "  for k in range(len(df)): # Comme la dernière fois, on parcourt tout le data frame à la recherche de matchs qui concernent notre équipe.\n",
    "\n",
    "    if df['HomeTeam'].iloc[k] == team :\n",
    "\n",
    "      form = np.mean(last_results) # La forme de chaque equipe correspond alors à la moyenne de notre vecteur last_results.\n",
    "\n",
    "      df['FormHomeTeam'].iloc[k] = form\n",
    "\n",
    "      r = df['Result'].iloc[k]\n",
    "\n",
    "      last_results = np.delete(np.insert(last_results, [0], r) ,[5]) # On commence par insérer notre résultat le plus actuel en première position de notre vecteur, \n",
    "      # puis on supprime la dernière valeur, qui est alors le résultat du N-6 ème match joué.\n",
    "    \n",
    "    if df['AwayTeam'].iloc[k] == team :\n",
    "      \n",
    "      form = np.mean(last_results)\n",
    "\n",
    "      df['FormAwayTeam'].iloc[k] = form\n",
    "\n",
    "      r = df['Result'].iloc[k]\n",
    "\n",
    "      pts = (1/2)*r**2 - (5/2)*r + 3\n",
    "  \n",
    "      last_results = np.delete(np.insert(last_results, [0], pts) ,[5])\n",
    "\n",
    "# Ici, on décide de ne pas réinitialiser le compteur entre chaque saison. Ainsi, nous pouvons garder une trace de la continuité entre deux saisons de championnat. \n",
    "# Comme nous l'avons dit précément, une saison de championnat n'est pas totalement indépendante de la précédente, et notre indicateur de forme permet de capter une plus grande partie de cet effet que précément.\n",
    "\n",
    "display(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SxdfMaKcviPs"
   },
   "source": [
    "On remarque alors que la forme semble bien être un indicateur assez différent du nombre de points, bien que corrélé. Par exemple, à la fin du championnat de 2019, on voit que Saint-Etienne réalisait une assez mauvaise performance (seulement 1,097 point de pris par match en moyenne) mais était dans une forme encore plus catastrophique ! (1 point seuleument gagné sur ses 5 derniers matchs).\n",
    "On voit aussi que Lille et Rennes sont au coude à coude en nombre de points dans le championnat, mais Lille étant beaucoup plus en forme, peut-être qu'ils auraient devancé Rennes si le championnat n'avait pas été interrompu.\n",
    "\n",
    "Nous pouvons alors supprimer nos lignes d'initialisation, qui ne reflètent pas forcément des informations intéréssantes (ici, une absence d'information). Bien que cela a été utile pour construire nos colonnes, baser notre modèle sur celles-ci pourrait entraîner des biais.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "id": "PmZRIPdmvhUX",
    "outputId": "c2419a19-38a8-4c5f-df9e-54e829a6b70d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19/08/16</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>Caen</td>\n",
       "      <td>3</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.712</td>\n",
       "      <td>1.712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Angers</td>\n",
       "      <td>Nice</td>\n",
       "      <td>0</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>3</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>0</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>0</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.195000</td>\n",
       "      <td>1.712</td>\n",
       "      <td>1.312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1404</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>3</td>\n",
       "      <td>1.409741</td>\n",
       "      <td>1.463475</td>\n",
       "      <td>1.200</td>\n",
       "      <td>2.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1405</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>3</td>\n",
       "      <td>1.408782</td>\n",
       "      <td>1.263929</td>\n",
       "      <td>1.200</td>\n",
       "      <td>1.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>1.097476</td>\n",
       "      <td>1.324588</td>\n",
       "      <td>0.200</td>\n",
       "      <td>1.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1407</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>3</td>\n",
       "      <td>1.727583</td>\n",
       "      <td>1.483823</td>\n",
       "      <td>1.400</td>\n",
       "      <td>1.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1408</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.712459</td>\n",
       "      <td>1.496378</td>\n",
       "      <td>2.400</td>\n",
       "      <td>1.600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1409 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam  Result  PtsHomeTeam  PtsAwayTeam  \\\n",
       "0       19/08/16        Lyon         Caen       3     2.195000     2.195000   \n",
       "1       20/08/16      Angers         Nice       0     0.695000     2.195000   \n",
       "2       20/08/16       Lille        Dijon       3     0.695000     0.695000   \n",
       "3       20/08/16     Lorient       Bastia       0     0.695000     0.695000   \n",
       "4       20/08/16      Nantes       Monaco       0     2.195000     1.195000   \n",
       "...          ...         ...          ...     ...          ...          ...   \n",
       "1404  07/03/2020        Nice       Monaco       3     1.409741     1.463475   \n",
       "1405  07/03/2020       Reims        Brest       3     1.408782     1.263929   \n",
       "1406  08/03/2020  St Etienne     Bordeaux       1     1.097476     1.324588   \n",
       "1407  08/03/2020      Rennes  Montpellier       3     1.727583     1.483823   \n",
       "1408  08/03/2020       Lille         Lyon       3     1.712459     1.496378   \n",
       "\n",
       "      FormHomeTeam  FormAwayTeam  \n",
       "0            1.712         1.712  \n",
       "1            1.112         1.712  \n",
       "2            1.112         1.112  \n",
       "3            1.112         1.112  \n",
       "4            1.712         1.312  \n",
       "...            ...           ...  \n",
       "1404         1.200         2.200  \n",
       "1405         1.200         1.200  \n",
       "1406         0.200         1.200  \n",
       "1407         1.400         1.400  \n",
       "1408         2.400         1.600  \n",
       "\n",
       "[1409 rows x 8 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = df.drop(index = np.arange(10))\n",
    "df = df.set_index(np.arange(len(df)))\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 258
    },
    "id": "TySgGNcy57X6",
    "outputId": "73a496c7-3646-456e-cc23-a1ca0642d5ed"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1409.000000</td>\n",
       "      <td>1409.000000</td>\n",
       "      <td>1409.000000</td>\n",
       "      <td>1409.00000</td>\n",
       "      <td>1409.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.649397</td>\n",
       "      <td>1.366806</td>\n",
       "      <td>1.394589</td>\n",
       "      <td>1.34464</td>\n",
       "      <td>1.401151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.306344</td>\n",
       "      <td>0.482027</td>\n",
       "      <td>0.485403</td>\n",
       "      <td>0.66118</td>\n",
       "      <td>0.652948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.180800</td>\n",
       "      <td>0.176988</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.043397</td>\n",
       "      <td>1.068667</td>\n",
       "      <td>0.80000</td>\n",
       "      <td>0.878000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.303361</td>\n",
       "      <td>1.333562</td>\n",
       "      <td>1.31200</td>\n",
       "      <td>1.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.586875</td>\n",
       "      <td>1.622869</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.960195</td>\n",
       "      <td>2.962849</td>\n",
       "      <td>3.00000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Result  PtsHomeTeam  PtsAwayTeam  FormHomeTeam  FormAwayTeam\n",
       "count  1409.000000  1409.000000  1409.000000    1409.00000   1409.000000\n",
       "mean      1.649397     1.366806     1.394589       1.34464      1.401151\n",
       "std       1.306344     0.482027     0.485403       0.66118      0.652948\n",
       "min       0.000000     0.180800     0.176988       0.00000      0.000000\n",
       "25%       0.000000     1.043397     1.068667       0.80000      0.878000\n",
       "50%       1.000000     1.303361     1.333562       1.31200      1.400000\n",
       "75%       3.000000     1.586875     1.622869       1.80000      1.800000\n",
       "max       3.000000     2.960195     2.962849       3.00000      3.000000"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Q1wrkc-m6cpb"
   },
   "source": [
    "Ces statistiques descriptives nous permettent de tester la cohérence de nos résultats, pour voir si on a bien construit nos colonnes. On observe qu'en moyenne le nombre de points par match moyen des equipes et leur forme moyenne sont presque identiques : on pouvait s'y attendre, étant donné que les effets de forme se compensent quand on considère leur moyenne. \n",
    "\n",
    "Cela dit, l'écart-type de la forme est plus important, ce à quoi on s'attendait (plus de variations de forme que de variations de points moyens sur toute la saison).\n",
    "\n",
    "Il peut sembler étrange que la moyenne de points des équipes qui jouent à l'extérieur soit plus élevée que la moyenne de points des équipes qui jouent à domicile. Cela peut s'expliquer par le fait que quand on équipe joue à domicile, elle a probablement joué un match de plus à l'extérieur avant (une fois sur deux) qu'elle perd plus souvent comme on l'a vu dans le describe(). \n",
    "A l'inverse, une equipe qui joue à l'extérieur a probablement joué à domicile avant et aborde donc le match avec plus de points en moyenne (même si on le voit, l'effet est assez infime). Cet effet est donc logiquement exacerbé sur les formes, plus variables.\n",
    "\n",
    "On peut aussi être surpris par le fait que les moyennes de points des équipes sont inférieures à la moyenne des résultats. Une fois de plus, c'est normal : la colonne Result représente un résultat à domicile, or nous avons remarqué que les equipes gagnaient plus souvent leurs matchs à domicile. Les indicateurs \"PtsHomeTeam\" et \"PtsAwayTeam\" représentent eux les points moyens obtenu en jouant à domicile ET à l'éxterieur. Il ne faut pas les confondre avec les nombre de points qu'une équipe obtient en jouant à domicile. Il est vrai que le nom de cette variable peut prêter à confusion, mais il faut bien garder en tête que ce n'est pas la même chose. \n",
    "On s'attends donc bien à ce que la moyenne du résultat, qui nos correpond qu'à des matchs joués à domicile, soit plus élevée que les moyennes de PtsHomeTeam et PtsAwayTeam qui correspondent, une fois de plus, à des matchs joués à domicile ET à l'extérieur. Cela corrobore même notre observation qui disait que on a plus de chance de gagner quand on joue à domicile.\n",
    "\n",
    "Nos resultats sont donc bien cohérents.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wf_QiDNr1LH1"
   },
   "source": [
    "### B) Visualisation\n",
    "\n",
    "Avec ces données beaucoup plus riches, nous allons pouvoir essayer de voir graphiquement les effets de nos variables sur le résultat d'un match."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "id": "-rp64Zkd95_n",
    "outputId": "9545732c-ebf8-47bb-bcfe-e9704afdf538"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(df['PtsHomeTeam'],df['Result'],'ro')\n",
    "plt.title('Nombre de points gagnés par une équipe à domicile en fonction de son nombre moyen de points avant le match')\n",
    "plt.xlabel(\"Nombre de points de l'équipe à domicile avant le match\")\n",
    "plt.ylabel('Résultat', size=15)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wyRAdAeyhrdA"
   },
   "source": [
    "Il est assez difficile de distinguer grand chose sur ce graphique, car comme notre Y ne prend que 3 valeurs, celles-ci se supperposent sur le graphique. Il semble tout de même y avoir une correlation entre le nombre de points moyen obtenu par une équipe à domicile avant le match et le résultat du match : on voit que le trait rouge se décale vers la droite en montant, ce qui veut dire que si une equipe à domicile gagne, elle a plus régulièrement des points moyens par match élevés.\n",
    "Essayons de vérifier cela avec des graphiques plus détaillés :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "fig, axes = plt.subplots(1, 2, figsize=(20, 10))\n",
    "fig.suptitle(\"Résultat d'un match en fonction des points moyens obtenus par les deux équipes avant le match\", fontsize = 20)\n",
    "\n",
    "sns.boxenplot(ax=axes[0], x='Result',y='PtsHomeTeam', data=df)\n",
    "axes[0].set_title(\"Répartition des points des équipes à domicile avant le match selon le résultat final du match\")\n",
    "sns.boxenplot(ax=axes[1], x='Result',y='PtsAwayTeam', data=df)\n",
    "axes[1].set_title(\"Répartition des points de équipes à l'extérieur avant le match selon le résultat final du match\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La corrélation entre le nombre de points des équipes ressort plus clairement ici : on voit que plus le résultat est grand, plus les points moyens de l'équipe à domicile avant le match étaient élevés, en moyenne. A l'inverse, plus les résultat est élevé, plus les points moyens de l'équipe à l'extérieur avant le match étaient faibles, en moyenne. On garde à l'esprit que le résultat correspond aux points obtenus par l'equipe à domicile à l'issue du match. Ainsi, ce graphique nous montre simplement que plus une équipe a obtenu de points avant le match, plus elle a de chances de gagner.\n",
    "\n",
    "Pour s'en convaincre, utilisons l'argument lm de seaborn : (qui focntionne aussi pour les classifications, selon la documentation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "k1AtduPRj-Im",
    "outputId": "3120401b-a31a-45cb-8573-cdd98d4fd840"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for k in [\"PtsHomeTeam\", \"PtsAwayTeam\", \"FormHomeTeam\", \"FormAwayTeam\"]:\n",
    "  sns.lmplot(data=df, x=k, y=\"Result\")\n",
    "  plt.title('Regression logistique du résultat sur'+ k)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Q6nHF1lSkFtE"
   },
   "source": [
    "On peut désormais identifier les correlations auxquelles on s'attendait : on voit bien que plus une équipe à domicile est en forme ou a gagné de points durant le championnat, plus elle a de chances de gagner son prochain match. A l'inverse, plus l'equipe à l'éxterieur est en forme ou a gagné de points, plus il y a de chance pour que l'equipe à domicile perde. Nos indicateurs sont donc bien corrélés à notre résultat et peuvent donc servir à le prédire. \n",
    "Comment effectuer ces prédictions et à quel point seront-elles exactes ?\n",
    "C'est ce que nous allons découvrir en partie C.\n",
    "\n",
    "Avant cela, continuons d'essayer de représenter visuellement de notre DataSet afin de s'en imprégner et mieux appréhender les données : celui-ci est devenu très riche, en témoigne les grapes suivant, qui se focalisent sur les données propres à chaque équipe qui a joué dans le championnat :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Indication : les lignes du haut et du bas représentent les mêmes données, sous une forme différente'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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OxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVItOxEkSZIkSZIkSVKtadWJEBEpInabpH3NL/ubMxn7q+z38xHx7snc53QQEYsi4pdTHY5hM5l5ZhAi4jkR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\n",
      "text/plain": [
       "<Figure size 1800x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 3, figsize=(25, 15))\n",
    "fig.suptitle('Indicateurs pour chaque equipe depuis 2016', fontsize = 20)\n",
    "\n",
    "\n",
    "sns.boxenplot(ax=axes[0,0],x='PtsHomeTeam',y='HomeTeam', data=df.sort_values('HomeTeam'))\n",
    "axes[0,0].set_title('Nombre de points moyen obtenu par chaque équipe avant de jouer un match à domicile')\n",
    "\n",
    "sns.boxenplot(ax=axes[0,1], x='FormHomeTeam',y='HomeTeam', data=df.sort_values('HomeTeam'))\n",
    "axes[0,1].set_title('Forme moyenne de chaque équipe avant de jouer un match à domicile')\n",
    "\n",
    "sns.boxenplot(ax=axes[0,2],x='PtsAwayTeam',y='AwayTeam', data=df.sort_values('AwayTeam'))\n",
    "axes[0,2].set_title(\"Nombre de points moyen obtenu par chaque équipe avant de jouer un match à l'éxterieur\")\n",
    "\n",
    "sns.barplot(ax=axes[1,0],x='PtsHomeTeam',y='HomeTeam', data=df.sort_values('HomeTeam'))\n",
    "axes[1,0].set_title('Nombre de points moyen obtenu par chaque équipe avant de jouer un match à domicile')\n",
    "\n",
    "sns.barplot(ax=axes[1,1], x='FormHomeTeam',y='HomeTeam', data=df.sort_values('HomeTeam'))\n",
    "axes[1,1].set_title('Forme moyenne de chaque équipe avant de jouer un match à domicile')\n",
    "\n",
    "sns.barplot(ax=axes[1,2],x='PtsAwayTeam',y='AwayTeam', data=df.sort_values('AwayTeam'))\n",
    "axes[1,2].set_title(\"Nombre de points moyen obtenu par chaque équipe avant de jouer un match à l'éxterieur\")\n",
    "'Indication : les lignes du haut et du bas représentent les mêmes données, sous une forme différente'\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les box permettent de communiquer beaucoup d'informations : plus la box de chaque equipe est large, plus celle-ci est inconstante : on voit ainsi que Monaco dont le nombre moyen de points dans le championnat a beaucoup varié depuis 2016 (cf le premier graphique). Cela se vérifie empiriquement : 1 ère du championnat en 2017, 18 ème en 2018. Le fait que la largeur des boîtes reflètent l'inconstance est encore plus mise en lumière par les graphiques de la deuxième colonne : on voit que les box sont encore plus larges, car l'indicateur de forme est par définition plus variable que l'indicateur de points moyens. \n",
    "\n",
    "Nous pouvons aussi effectuer un classement des équipes sur toute cette période, ou en tous cas voir se dégager des grandes tendances : plus la médiane de points ou de forme d'une équipe (qui correspond au trait noir sur la box) est à droite, plus cette équipe a obtenu de bons résultats durant le championnat. C'est donc sans surprise que l'on voit la box de Paris pointer beaucoup plus à droite de toutes les autres. Monaco sort aussi du lot mais est plus inconstant, viennent ensuite Lyon puis Marseille, clairement un cran en dessous de Paris, et un peu en dessous Monaco mais plus constantes.\n",
    "\n",
    "Essayons désormais de voir si nous allons pouvoir facilement classifier nos données :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 280
    },
    "id": "YPs5jvtjebSK",
    "outputId": "f6af4652-dc87-4bc8-8cc6-3f08e34938f5"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "cmap = mpl.colors.ListedColormap([\"navy\", \"crimson\", \"limegreen\",\"limegreen\"])\n",
    "norm = mpl.colors.BoundaryNorm(np.arange(-0.5,4), cmap.N)\n",
    "fig, ax = plt.subplots()\n",
    "df.plot.scatter(x=\"PtsHomeTeam\", y=\"FormHomeTeam\", c=\"Result\", ax=ax, \n",
    "                cmap=cmap, norm=norm, s=100, edgecolor ='none', colorbar=False)\n",
    "fig.colorbar(ax.collections[0], ticks=[0,1,3])\n",
    "\n",
    "plt.show()\n",
    "                                 \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque que la classification va être difficile à réaliser : les nuages de points se superposent ce qui montre que nos indicateurs ne sont pas si discriminants pour prédire les résultats. En effet, ici les points verts correspondent aux victoires à domicile, les points rouges aux égalités et les points bleus aux défaites. On remarque tout de même que le nuage de points vert est un peu plus à droite que les rouge et bleu, ce qui montre que les points moyens d'une équipe avant le match jouent tout de même un peu sur le résultat. Au niveau de la forme, cela semble encore plus compliqué à distinguer : on peut quand même le voir en remarquant que tout en bas, on retrouve surtout des points bleus, tandis qu'en haut, on retrouve plus de points verts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure = plt.figure(figsize = (20, 10))\n",
    "plt.subplot(121)\n",
    "plt.hist2d(data=df, x='PtsHomeTeam', y='Result', cmap='hot', bins=30)\n",
    "plt.suptitle(\"Densité des observations du Résultat et du nombre de points de l'équipe à domicile\",size=30)\n",
    "plt.xlabel(\"Nombre de points de l'équipe à domicile avant le match\")\n",
    "plt.ylabel('Résultat', size=15)\n",
    "plt.colorbar()\n",
    "plt.subplot(122)\n",
    "plt.hist2d(data=df, x='PtsAwayTeam', y='Result', cmap='hot', bins=30)\n",
    "plt.suptitle(\"Densité des observations du Résultat et du nombre de points de l'équipe à domicile\")\n",
    "plt.xlabel(\"Nombre de points de l'équipe à l'extérieur avant le match\")\n",
    "plt.ylabel('Résultat', size=15)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ce dernier graphique est une version plus détaillée du premier de cette partie : on peut désormais observer la densité de répartition de nos couples (Résultat,PtsHomeTeam) et (Résultat,PtsAwayTeam). Ce dernier On observe ici clairement deux phénomènes : les indicateurs de points moyens varient généralement entre 1 et 1.5 points, car comme il s'agit d'une moyenne, leur variance est relativement faible. On remarque aussi une fois de plus le phénomène principal de nos données : une équipe gagne plus souvent quand elle joue à domicile (on observe plus de Résultats égaux à 3)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oFysTHE5MKu6"
   },
   "source": [
    "### C) Modélisation\n",
    "\n",
    "Nous allons désormais pouvoir passer à la construction de notre modèle ! \n",
    "\n",
    "Il s'agit ici clairement d'un problème de classification , Y étant discret (il ne prend comme valeurs que 3, 1 et 0). On va donc pouvoir utiliser le module de regression logistique de sklearn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7snYADuqM6B2"
   },
   "source": [
    "Commençons par séparer nos datasets en train et test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PEv6aZpdM_hT",
    "outputId": "bc630dcc-a950-435a-f06f-0d22792da33a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(986, 4) (423, 4)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df[['PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']]\n",
    "Y = df['Result']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state=7)\n",
    "\n",
    "print(X_train.shape, X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w69o28bhPNsw"
   },
   "source": [
    "Notre dataset qui va servir à entraîner le régresseur correpond à 70% de nos observations, soit 993 observation. Nous testerons ensuite notre modèle sur 30% des données, soit notre X_test constitué de 426 données.\n",
    "\n",
    "Maintenant, nous pouvons entraîner notre régresseur sur X_train:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "8pZXhqxdPTOu"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YzR-_tVSPk93"
   },
   "source": [
    "Commençons par vérifier si notre modèle marche sur les premières données de X_test. Regardons ce qu'il prédit pour les 5 premiers matchs de X_test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 46
    },
    "id": "V6ib9I4uPhWg",
    "outputId": "24a95c4d-53f5-4744-8cf4-69c8780fef32"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([1083, 313, 734, 284, 671], dtype='int64')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([3, 3, 3, 0, 0])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(X_test.head().index, lr.predict(X_test[:5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 677
    },
    "id": "AqVgeywZR56z",
    "outputId": "deeef8ec-5b4b-4f3c-db00-e1ec771244a4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date            28/04/2019\n",
       "HomeTeam              Caen\n",
       "AwayTeam             Dijon\n",
       "Result                   3\n",
       "PtsHomeTeam       0.794106\n",
       "PtsAwayTeam       0.860471\n",
       "FormHomeTeam           1.2\n",
       "FormAwayTeam           1.4\n",
       "Name: 1083, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Date            15/04/17\n",
       "HomeTeam            Nice\n",
       "AwayTeam           Nancy\n",
       "Result                 3\n",
       "PtsHomeTeam      2.16333\n",
       "PtsAwayTeam     0.981515\n",
       "FormHomeTeam         2.2\n",
       "FormAwayTeam         0.6\n",
       "Name: 313, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Date            12/05/18\n",
       "HomeTeam           Lille\n",
       "AwayTeam           Dijon\n",
       "Result                 3\n",
       "PtsHomeTeam     0.978787\n",
       "PtsAwayTeam      1.24282\n",
       "FormHomeTeam         1.4\n",
       "FormAwayTeam         1.4\n",
       "Name: 734, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Date            18/03/17\n",
       "HomeTeam          Nantes\n",
       "AwayTeam            Nice\n",
       "Result                 1\n",
       "PtsHomeTeam      1.27967\n",
       "PtsAwayTeam      2.14633\n",
       "FormHomeTeam         1.6\n",
       "FormAwayTeam         2.2\n",
       "Name: 284, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Date             31/03/18\n",
       "HomeTeam            Dijon\n",
       "AwayTeam        Marseille\n",
       "Result                  0\n",
       "PtsHomeTeam       1.25756\n",
       "PtsAwayTeam       1.95566\n",
       "FormHomeTeam          1.4\n",
       "FormAwayTeam          1.4\n",
       "Name: 671, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ce qui correspond aux matchs :\n",
    "display(df.iloc[1083], df.iloc[313], df.iloc[734], df.iloc[284], df.iloc[671])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d3aryX5HSivo"
   },
   "source": [
    "Les résultats sont intéréssants : on voit qu'on prédit bien l'issue de quatre matchs sur cinq. Le seul match que nous prédisons mal est un match nul, résultat assez diffciles à prédire car très incertains. Le match Lille Dijon pouvait d'ailleurs paraître assez incertain, les données brutes laissent même présager un certain avantage de Dijon, pourtant notre modèle ne s'est pas trompé et a bien prédit la victoire de Lille. C'est prometteur.\n",
    "\n",
    "De plus, il ne semble pas se dégager d'apétence de notre algorithme à miser sur la victoire de l'equipe à domicile. En effet, nous avons vu que c'est généralement l'équipe à domicile qui gagne, donc pourquoi se mouiller ? Il faut que nous fassions attention à ce que l'algorithme ne renvoie pas 3 trop souvent, comme c'est le résultat le plus probable. Mais ici, nous prédisons tout de même deux victoires à l'extérieur, ce qui laisse présager que notre modèle s'adapte bien à chaque situation.\n",
    "\n",
    "Pour pouvoir tester si notre modèle est vraiment bon, nous allons utiliser les metriques d'évaluation proposées par sklearn.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dQ9xQkCpPgME",
    "outputId": "07acaed9-895d-4309-fefa-dacdc6f65e88"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.49      0.43      0.46       111\n",
      "           1       0.00      0.00      0.00       125\n",
      "           3       0.49      0.86      0.63       187\n",
      "\n",
      "    accuracy                           0.49       423\n",
      "   macro avg       0.33      0.43      0.36       423\n",
      "weighted avg       0.35      0.49      0.40       423\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "Y_pred = lr.predict(X_test)\n",
    "print(classification_report(Y_test, Y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yysnbv3UUFJQ"
   },
   "source": [
    "Nous remarquons tout de suite que nous prédisons très mal les matchs nuls : sur les 125, nous n'en avons bien prédit aucun...Nous sommes donc très mauvais pour prédire les matchs nuls. Cependant, pour les victoires et les défaites, les résultats sont encourageants. \n",
    "\n",
    "Ce qu'il est important de regarder, dans le cadre d'un pari, c'est surtout la precision, c'est à dire la pertinence de l'information remontée.\n",
    "\n",
    "En effet, le recall nous indique ici que 86% des victoires à domicile ont bien été prédites par notre modèle. Cela ne nous intéresse que peu, dans le sens ou l'objectif d'un pari n'est pas de deviner tous les matchs, mais plutôt de ne pas se tromper sur ceux qu'on essaye de prédire.\n",
    "\n",
    "Ici, nous avons une donnée très intéréssante : notre précision pour prédire les victoires des équipes à l'extérieur semble assez élevée. En effet, la proportion de victoires à l'extérieur ne correspond qu'à environ 1/4 ou au plus 1/3 des matchs, or 49% de nos paris \"l'equipe à l'extérieur gagne\" s'avèrent juste. Nous sommes donc bien meilleurs qu'en pariant juste au hasard. On pourrait donc essayer d'adopter une stratégie de paris ne consistant à parier que sur les victoires à l'extérieur, quand c'est le résultat prédit par notre algorithme.\n",
    "\n",
    "Maintenant, nous allons pouvoir essayer d'exploiter ses résultats lucrativement parlant : est-il possible de gagner de l'argent grâce aux prédictions de notre modèle ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mCSxb9s6XU42"
   },
   "source": [
    "## **PARTIE 2 : MACHINE LEARNING VS BOOKMAKERS**\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qIx2xa9uXfms"
   },
   "source": [
    "Dans cette partie, nous allons confronter nos résultats à la réalité. En effet, il sera toujours impossible de prédire à la perfection des matchs de football, étant donné que c'est un sport rempli d'incertitudes où l'aléatoire joue beaucoup. \n",
    "Ainsi, il est sera toujours impossible d'obtenir des métriques d'évaluation très satisfaisantes, surtout au vu du peu de données dont l'on dispose avant chaque match. C'est notament ce qui justifie l'existence des paris sportifs : c'est justement parce qu'il y a une part inimputable de chance que des bookmakers (les personnes qui proposent les paris), parviennent à s'enrichir.\n",
    "\n",
    "Ainsi, si nous prenons les bookmakers pour référence, on peut considérer que nos résultats seraient bons à partir du moment où ils parviendrait à mieux estimer que les bookmakers la loi de probabilité de nos résultats Y, sachant X, les données d'avant chaque match. Notre régression logistique est une tentative d'estimer cette loi, et nous allons pouvoir voir si nos résultats nous permettent de gagner de l'argent, sur le moyen terme.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KTrZBc0GiXrq"
   },
   "source": [
    "### **A) Qu'est ce qu'une côte ?**\n",
    "\n",
    "Tout d'abord, afin de bien expliciter notre objectif et notre manière de faire, nous allons revenir à la base des paris sportifs. Dans cette partie, nous allons réexpliquer ce qu'est une côte et le fonctionnement des paris sportifs.\n",
    "\n",
    "Une cote représente le gain potentiel que le parieur peut recevoir en misant 1 euro si son pari est gagnant. C’est le site de pari sportif qui la détermine. Il faut savoir qu’une cote est nombre décimal (1.82 ou 2.13 par exemple) qui ne peut être inférieur à 1.\n",
    "\n",
    "Voici un petit programme qui détaille le calcul de nos bénéfices :\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "id": "JAzm3FdXj1jm"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voici un exemple pour mieux comprendre : si jamais je prédis bien la victoire de Paris contre Dijon, côté à 1.17,et que j'ai misé 50 euros, j'obtiens : 8.5 euros.\n",
      "Cependant, si Paris avait fait match nul, on aurait perdu 50 euros.\n"
     ]
    }
   ],
   "source": [
    "def benefices_pari(mise, cote, resultat_predit, resultat_reel) : \n",
    "\n",
    "  if resultat_predit == resultat_reel :\n",
    "     return(mise*cote-mise) # On empoche nos gains potentiels c'est à dire notre mise fois la côte, moins notre investissement initial, c'est à dire la mise\n",
    "    \n",
    "  else :\n",
    "    return(-mise) \n",
    "\n",
    "print(\"Voici un exemple pour mieux comprendre : si jamais je prédis bien la victoire de Paris contre Dijon, côté à 1.17,et que j'ai misé 50 euros, j'obtiens :\", benefices_pari(50, 1.17, 3, 3), \"euros.\")\n",
    "print(\"Cependant, si Paris avait fait match nul, on aurait perdu\", abs(benefices_pari(50, 1.17, 3, 1)), \"euros.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_EQTAOzij0TU"
   },
   "source": [
    "Attention, il faut ici bien faire une différence entre bénéfice et gain. Le bénéfice est ce qu'on empoche en plus de notre mise de départ, c'est à dire nos gains \"nets\", tandis que le gain ne représente que ce qui est gagné de manière brute.\n",
    "\n",
    "C'est pour cela qu'une côte est forcément supérieure à 1 : nos bénéfices sont égaux à (côte-1)*mise si jamais on prédit bien l'issue du match. Donc il faut forcément que la côte soit supérieure à 1 pour qu'on puisse espérer gagner de l'argent.\n",
    "\n",
    "On remarque aussi que plus la côte est grande, plus notre gain potentiel est grand. Ainsi, on se rend bien compte que plus une côte est proche de 1, plus il faut que nos probabilités de gagner soient fortes pour espérer être rentables.\n",
    "A l'inverse, plus une côte est grande, plus on est prêt à prendre des risques et parier des résultats qui peuvent sembler improbables au vu de la récompense.\n",
    "On voit donc clairement une relation décroissante entre la côte d'un évènement et sa probabilité.\n",
    "\n",
    "De manière plus mathématique, la côte associée à un résultat est l'inverse de la probabilité que celui-ci se réalise. On a donc la relation : côte = 1 / probabilité.\n",
    "\n",
    "(En réalité, pas tout a fait. On a plutôt côte = 85/(100*proba). En effet, pour que les bookmakers soient rentables, ils doivent se prendre une marge, qui est aujourd'hui d'à peu près 15%. On dit alors qu'on a un taux de retour joueur moyen de 85%)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BfG6jZ6snBs7"
   },
   "source": [
    "**B ) Gagner face aux bookmakers**\n",
    "\n",
    "Maintenant que nous comprenons mieux le système de côte, nous allons pouvoir essayer de nous confronter aux bookmakers. \n",
    "\n",
    "Notre régresseur résoud un problème de classification, cela fait que notre modèle renvoie une valeur prédite, celle qui a le plus de chances de se produire. Nous n'utiliserons dans cette partie que cette fonction de notre modèle, dans un soucis de simplicité.\n",
    "\n",
    "Nous pouvons utiliser différentes stratégies pour utiliser nos résultats. Par exemple, étant donné que notre precision score pour les victoires à l'éxterieur semble plutôt bon, on pourrait dire qu'on ne parie que quand notre régresseur prédit \"0\" comme résultat. Nous allons donc pouvoir tester plusieurs stratégies.\n",
    "\n",
    "Ces stratégies, nous allons les tester sur les données 2020, que nous avons laissé de côté au début, afin d'être sûr d'éviter de biaiser nos données.\n",
    "\n",
    "Commençons par préparer le dataset :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "id": "3glK8qQqtWHJ"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:671: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Div</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTR</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>...</th>\n",
       "      <th>PCAHA</th>\n",
       "      <th>MaxCAHH</th>\n",
       "      <th>MaxCAHA</th>\n",
       "      <th>AvgCAHH</th>\n",
       "      <th>AvgCAHA</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F1</td>\n",
       "      <td>21/08/2020</td>\n",
       "      <td>18:00</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>D</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.24</td>\n",
       "      <td>1.82</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1</td>\n",
       "      <td>1.323793</td>\n",
       "      <td>1.323793</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F1</td>\n",
       "      <td>22/08/2020</td>\n",
       "      <td>16:00</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.06</td>\n",
       "      <td>1.88</td>\n",
       "      <td>2.08</td>\n",
       "      <td>1.83</td>\n",
       "      <td>2.03</td>\n",
       "      <td>0</td>\n",
       "      <td>1.082414</td>\n",
       "      <td>1.392759</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F1</td>\n",
       "      <td>22/08/2020</td>\n",
       "      <td>20:00</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1.96</td>\n",
       "      <td>1</td>\n",
       "      <td>1.737586</td>\n",
       "      <td>1.772069</td>\n",
       "      <td>2.40</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1</td>\n",
       "      <td>23/08/2020</td>\n",
       "      <td>12:00</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.96</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1.92</td>\n",
       "      <td>1.92</td>\n",
       "      <td>1</td>\n",
       "      <td>1.427241</td>\n",
       "      <td>1.461724</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>F1</td>\n",
       "      <td>23/08/2020</td>\n",
       "      <td>14:00</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.83</td>\n",
       "      <td>2.14</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1.390000</td>\n",
       "      <td>1.406786</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/12/2020</td>\n",
       "      <td>14:00</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>H</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.94</td>\n",
       "      <td>2.04</td>\n",
       "      <td>1.95</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.86</td>\n",
       "      <td>3</td>\n",
       "      <td>0.670714</td>\n",
       "      <td>0.855640</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/12/2020</td>\n",
       "      <td>14:00</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.87</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.85</td>\n",
       "      <td>1</td>\n",
       "      <td>1.024077</td>\n",
       "      <td>0.648744</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/12/2020</td>\n",
       "      <td>14:00</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>D</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.96</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1.91</td>\n",
       "      <td>1.93</td>\n",
       "      <td>1</td>\n",
       "      <td>0.814770</td>\n",
       "      <td>1.230025</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/12/2020</td>\n",
       "      <td>16:00</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>H</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.16</td>\n",
       "      <td>1.83</td>\n",
       "      <td>2.17</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.07</td>\n",
       "      <td>3</td>\n",
       "      <td>1.981256</td>\n",
       "      <td>1.485615</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/12/2020</td>\n",
       "      <td>20:00</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.88</td>\n",
       "      <td>1.95</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2.177015</td>\n",
       "      <td>1.959089</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Div        Date   Time    HomeTeam    AwayTeam  FTHG  FTAG FTR  HTHG  \\\n",
       "0    F1  21/08/2020  18:00    Bordeaux      Nantes     0     0   D     0   \n",
       "1    F1  22/08/2020  16:00       Dijon      Angers     0     1   A     0   \n",
       "2    F1  22/08/2020  20:00       Lille      Rennes     1     1   D     1   \n",
       "3    F1  23/08/2020  12:00      Monaco       Reims     2     2   D     1   \n",
       "4    F1  23/08/2020  14:00     Lorient  Strasbourg     3     1   H     0   \n",
       "..   ..         ...    ...         ...         ...   ...   ...  ..   ...   \n",
       "133  F1  13/12/2020  14:00     Lorient       Nimes     3     0   H     2   \n",
       "134  F1  13/12/2020  14:00      Nantes       Dijon     1     1   D     1   \n",
       "135  F1  13/12/2020  14:00  Strasbourg        Metz     2     2   D     0   \n",
       "136  F1  13/12/2020  16:00       Lille    Bordeaux     2     1   H     2   \n",
       "137  F1  13/12/2020  20:00    Paris SG        Lyon     0     1   A     0   \n",
       "\n",
       "     HTAG  ... PCAHA  MaxCAHH  MaxCAHA  AvgCAHH  AvgCAHA  Result  PtsHomeTeam  \\\n",
       "0       0  ...  2.07     1.90     2.24     1.82     2.05       1     1.323793   \n",
       "1       1  ...  2.06     1.88     2.08     1.83     2.03       0     1.082414   \n",
       "2       0  ...  2.00     1.95     2.05     1.89     1.96       1     1.737586   \n",
       "3       2  ...  1.97     1.96     1.99     1.92     1.92       1     1.427241   \n",
       "4       1  ...  1.83     2.14     1.86     2.07     1.80       3     1.390000   \n",
       "..    ...  ...   ...      ...      ...      ...      ...     ...          ...   \n",
       "133     0  ...  1.94     2.04     1.95     1.97     1.86       3     0.670714   \n",
       "134     0  ...  1.87     2.07     1.90     2.00     1.85       1     1.024077   \n",
       "135     1  ...  1.96     1.97     1.99     1.91     1.93       1     0.814770   \n",
       "136     1  ...  2.16     1.83     2.17     1.79     2.07       3     1.981256   \n",
       "137     1  ...  2.01     1.88     1.95      NaN      NaN       0     2.177015   \n",
       "\n",
       "     PtsAwayTeam  FormHomeTeam  FormAwayTeam  \n",
       "0       1.323793          1.20           1.0  \n",
       "1       1.392759          1.20           1.8  \n",
       "2       1.772069          2.40           2.0  \n",
       "3       1.461724          1.60           1.6  \n",
       "4       1.406786          1.39           1.6  \n",
       "..           ...           ...           ...  \n",
       "133     0.855640          0.20           0.6  \n",
       "134     0.648744          1.00           1.2  \n",
       "135     1.230025          0.80           1.0  \n",
       "136     1.485615          1.60           1.4  \n",
       "137     1.959089          2.00           2.6  \n",
       "\n",
       "[138 rows x 110 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2020 = pd.concat([data_ligue_1_2019, data_ligue_1_2020]) # On concatène les données de 2019 et celles de 2020 : les indicateurs Points et Forme dépendent des championnats précédents,\n",
    "# Et nous voulons obtenir les données 2020 les plus précises possibles (ou du moins fidèles à notre methode de création de colonnes). On n'inclut que les données 2019,\n",
    "# Car les championnats encore plus vieux n'influent que très peu sur les indicateurs de 2020.\n",
    "# On effacera les données 2019 par la suite.\n",
    "\n",
    "\n",
    "df_2020['Result'] = df_2020['FTR'].apply(Resultat) # Nous conservons ici la colonne 'FTR', pour des raisons que nous expliquerons plus tard.\n",
    "df_2020 = df_2020.set_index(np.arange(len(df_2020)))\n",
    "\n",
    "df_2020['PtsHomeTeam'] = np.zeros(len(df_2020)) \n",
    "df_2020['PtsAwayTeam'] = np.zeros(len(df_2020))\n",
    "df_2020['FormHomeTeam'] = np.zeros(len(df_2020))\n",
    "df_2020['FormAwayTeam'] = np.zeros(len(df_2020))\n",
    "\n",
    "limite = len(data_ligue_1_2019) # Ici, on va explicitement se demander pour chaque équipe et poir chaque match si le match correspond au championnat actuel ou au précédent. \n",
    "# Nous ne pouvons plus simplement regarder le nombre de matchs, étant donné que quand le championnat s'est interrompu, toutes les équipes n'avait pas fait le même nombre de matchs.\n",
    "\n",
    "for team in df_2020.drop_duplicates(['HomeTeam'])['HomeTeam']: \n",
    "  \n",
    "  average_pts_team = 1.39 \n",
    "  nb_matches = 1 \n",
    "  Switch = False\n",
    "  last_results = 1.39*np.ones(5)\n",
    "\n",
    "  for k in range(len(df_2020)): \n",
    "\n",
    "    if df_2020['HomeTeam'].iloc[k] == team : \n",
    "           \n",
    "      if (k > limite and Switch == False) : # Ces lignes diffèrents du programme précédent car toutes les équipes n'ont pas joué le même nombre de matchs avant l'interuption de championnat\n",
    "         nb_matches = 1 \n",
    "         Switch = True # Switch = True equivaut au fait qu'on soit au championnat 2020\n",
    "      \n",
    "      df_2020['PtsHomeTeam'].iloc[k] = average_pts_team\n",
    "       \n",
    "      r = df_2020['Result'].iloc[k]\n",
    "\n",
    "      average_pts_team = (average_pts_team*nb_matches + r)/(nb_matches+1)\n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "\n",
    "      form = np.mean(last_results) \n",
    "\n",
    "      df_2020['FormHomeTeam'].iloc[k] = form\n",
    "\n",
    "      last_results = np.delete(np.insert(last_results, [0], r) ,[5])  \n",
    "    \n",
    "    if df_2020['AwayTeam'].iloc[k] == team : \n",
    "\n",
    "      if k > limite and Switch == False :\n",
    "         nb_matches = 1 \n",
    "         Switch = True\n",
    "      \n",
    "      df_2020['PtsAwayTeam'].iloc[k] = average_pts_team\n",
    "\n",
    "      r = df_2020['Result'].iloc[k]\n",
    "\n",
    "      pts = (1/2)*r**2 - (5/2)*r + 3 \n",
    "      \n",
    "      average_pts_team = (average_pts_team*nb_matches + pts)/(nb_matches+1) \n",
    "      \n",
    "      nb_matches = nb_matches+1      \n",
    "\n",
    "      form = np.mean(last_results)\n",
    "\n",
    "      df_2020['FormAwayTeam'].iloc[k] = form\n",
    "  \n",
    "      last_results = np.delete(np.insert(last_results, [0], pts) ,[5])\n",
    "\n",
    "df_2020 = df_2020.drop(index = np.arange(limite))\n",
    "df_2020 = df_2020.set_index(np.arange(len(df_2020)))\n",
    "    \n",
    "display(df_2020)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5Pk8adhLN1Wl"
   },
   "source": [
    "En appliquant les mêmes programmes que précément, on parvient à obtenir des données 2020 prêtes à être traitées. On remarque notament qu'avoir concatené les données 2019 au début nous permet d'avoir des indices de forme qui ne commençent pas à 1.39, ce qui va nous permettre de pouvoir prédire les résultats des touts premiers matchs, alors que le championnat 2020 débute à peine, en se servant des données obtenues en 2019 (nos indicateurs sont construits\n",
    "de manière à pouvoir faire cela)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant que notre dataset 2020 est retravaillé, nous allons pouvoir essayer d'appliquer différentes stratégies afin de gagner de l'argent grâce aux paris.\n",
    "En effet, notre dataset 2020 contient notamment un historique des côtes associés à tous les matchs, ce qui va nous être très utile pour pouvoir rétroactivement calculer les gains que nous aurions générés.\n",
    "Afin de générer le maximum d'argent possible, nous allons à chaque fois choisir la côte la plus intéréssante parmi toutes celles proposées : en effet, notre hsitorique de côtes contient les côtes de différents sites de paris sportifs, ce qui fait qu'à chaque résultat prédit nous pouvons maximiser nos gains espérés en allant chercher la côte la plus haute.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Div', 'Date', 'Time', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTHG', 'HTAG', 'HTR', 'HS', 'AS', 'HST', 'AST', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'VCH', 'VCD', 'VCA', 'MaxH', 'MaxD', 'MaxA', 'AvgH', 'AvgD', 'AvgA', 'B365>2.5', 'B365<2.5', 'P>2.5', 'P<2.5', 'Max>2.5', 'Max<2.5', 'Avg>2.5', 'Avg<2.5', 'AHh', 'B365AHH', 'B365AHA', 'PAHH', 'PAHA', 'MaxAHH', 'MaxAHA', 'AvgAHH', 'AvgAHA', 'B365CH', 'B365CD', 'B365CA', 'BWCH', 'BWCD', 'BWCA', 'IWCH', 'IWCD', 'IWCA', 'PSCH', 'PSCD', 'PSCA', 'WHCH', 'WHCD', 'WHCA', 'VCCH', 'VCCD', 'VCCA', 'MaxCH', 'MaxCD', 'MaxCA', 'AvgCH', 'AvgCD', 'AvgCA', 'B365C>2.5', 'B365C<2.5', 'PC>2.5', 'PC<2.5', 'MaxC>2.5', 'MaxC<2.5', 'AvgC>2.5', 'AvgC<2.5', 'AHCh', 'B365CAHH', 'B365CAHA', 'PCAHH', 'PCAHA', 'MaxCAHH', 'MaxCAHA', 'AvgCAHH', 'AvgCAHA', 'Result', 'PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']\n"
     ]
    }
   ],
   "source": [
    "print(df_2020.columns.tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ici, les colonnes qui correspondent aux paris sont les colonnes à partir de 'B365H'. 'B365H' correspond à la côte de l'équipe à domicile (H pour Home) sur le site B365. On remarque alors que nous avons déjà des colonnes qui correspondent au Max de chaque côte : 'MaxH', 'MaxD', 'MaxA'. Nous ppurrons donc directement les utiliser par la suite afin de maximiser nos gains (car rappelons-le, plus la côte est grande, et plus nous gagnons d'argent en cas de victoire)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Stratégie 1 : Jouer tout ce que le modèle nous dit de jouer*\n",
    "\n",
    "Tout d'abord, nous allons essayer la stratégie la moins élaborée, qui consiste à jouer ce que notre modèle prédit pour chaque match. Pour cela, nous allons créer de nouvelles colonnes dans le DataFrame, afin de pouvoir bien visualiser et retracer, pour chaque match, notre prédiction, la côte associée, le résultat réel, et ce qu'on gagne."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "id": "l_oCEmrRO6K2",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.59</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>3</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>3</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>3</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.26</td>\n",
       "      <td>3</td>\n",
       "      <td>1.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.82</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>3</td>\n",
       "      <td>2.08</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>3</td>\n",
       "      <td>1.79</td>\n",
       "      <td>3</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.66</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result  Benefice\n",
       "0      Bordeaux      Nantes           3  2.59       1     -1.00\n",
       "1         Dijon      Angers           3  2.86       0     -1.00\n",
       "2         Lille      Rennes           3  2.38       1     -1.00\n",
       "3        Monaco       Reims           3  2.00       1     -1.00\n",
       "4       Lorient  Strasbourg           3  2.75       3      1.75\n",
       "..          ...         ...         ...   ...     ...       ...\n",
       "133     Lorient       Nimes           3  2.26       3      1.26\n",
       "134      Nantes       Dijon           3  1.82       1     -1.00\n",
       "135  Strasbourg        Metz           3  2.08       1     -1.00\n",
       "136       Lille    Bordeaux           3  1.79       3      0.79\n",
       "137    Paris SG        Lyon           3  1.66       0     -1.00\n",
       "\n",
       "[138 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def Resultat_inverse(r): #Nous crééons une fonction resultat \"inverse\" analogue à celle de la Partie 1, qui nous permet de passer du\n",
    "    # résultat prédit par notre modèle à une lettre, ce qui est nécéssaire pour retrouver la côte associée à ce pari.\n",
    "  if r == 3:\n",
    "    return('H')\n",
    "  elif r == 1:\n",
    "    return('D')\n",
    "  else :\n",
    "    return('A')\n",
    "\n",
    "def chercheur_cote(x):\n",
    "    return(x['Max' + Resultat_inverse(x['Prediction'])]) \n",
    "#Nous pouvons désormais définir une fonction qui va chercher la côte assignée à chacune de nos prédictions.\n",
    "\n",
    "def benefices_pari(x) : # Nous redefinissons aussi notre fonction de calcul de benefices, que nous allons devoir appliquer de manière matricielle.\n",
    "  if x.Result == x.Prediction :\n",
    "     return(x.Mise*x.Cote-x.Mise) \n",
    "  else :\n",
    "    return(-x.Mise) \n",
    "\n",
    "\n",
    "def strategie_1(dataframe): #Nous pouvons désormais appliquer notre stratégie à notre DataFrame principal.\n",
    "    \n",
    "    dataframe['Prediction'] = lr.predict(dataframe[['PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']]) # Nous créons une colonne de prédiction\n",
    "    \n",
    "    dataframe['Cote'] = dataframe.apply(chercheur_cote, axis=1) \n",
    "    \n",
    "    dataframe['Mise'] = 1 # Ici, nous misons 1 euro à chaque fois.\n",
    "    \n",
    "    dataframe['Benefice'] = dataframe.apply(benefices_pari, axis = 1)\n",
    "    \n",
    "    return(dataframe)\n",
    "\n",
    "    \n",
    "df_2020_strategie_1 = strategie_1(df_2020)\n",
    "\n",
    "display(df_2020_strategie_1[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result', 'Benefice']])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qjpEu6xAZARF"
   },
   "source": [
    "On remarque déjà que nos obtenons plus de -1 que prévu dans nos gains, qui correspondent à nos erreurs de paris. En effet, quand on se trompe, on perd toujours notre mise, qui est ici toujours fixée à 1 : il est donc rassurant de voir que tous nos nombres négatifs sont égaux à -1.\n",
    "\n",
    "Il ne nous reste plus qu'à faire un somme sur nos gains pour voir combien on aurait gagné d'argent en 2020 si on avait misé 1 euros sur chaque match, sur le résultat que nous prédit notre régresseur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "id": "xvfZFmw-ZOsk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 138 /Benefices : 1.8800000000000034 €\n"
     ]
    }
   ],
   "source": [
    "print('Nombre de matchs:',len(df_2020_strategie_1), '/Benefices :', sum(df_2020_strategie_1['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque que sur tout le DataFrame, nos erreurs finissent par s'équilibrer et on empoche 2.54 euros. Cela est finalement assez faible, car nous avons tout de même misé sur 128 matchs. Il suffit que nous nous trompions sur 3 matchs et nous passons déjà dans le négatif : cette méthode ne semble pas être très fiable, bien qu'encourageante."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Stratégie 2 : Jouer quand notre modèle prédit une victoire à l'extérieur*\n",
    "\n",
    "Cette première stratégie est déjà prometteuse, mais un peu simple : nous nous contentons d'écouter notre modèle tel un gourou qui nous dicte quoi jouer. Nous pouvons essayer de jouer plus intelligement : nous avons vu dans la partie précédente que notre modèle avait une précision partiuclièrement bonne quand il s'agit de prédir des victoires à l'extérieur : essayons de voir combien on aurait gagné en suivant cette stratégie."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "id": "lTeumPdJaXNp"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 33 /Benefices : 4.68 €\n"
     ]
    }
   ],
   "source": [
    "df_2020_strategie_2 = df_2020_strategie_1[df_2020_strategie_1['Prediction'] == 0]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_2), '/Benefices :', sum(df_2020_strategie_2['Benefice']),'€')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cette méthode est encore plus prometteuse : nous gagnons désormais 5.68 euros en 2020 grâce à notre modèle. Nous misons en plus sur beaucoup moins de matchs, ce qui rend cette méthode moins risquée. Sur 32 euros misés, nous gagnons 5,68 euros, ce qui correpond à un taux de retour sur investissement de : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.181818181818183 %\n"
     ]
    }
   ],
   "source": [
    "print(((len(df_2020_strategie_2)+sum(df_2020_strategie_2['Benefice']))/len(df_2020_strategie_2)-1)*100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Stratégie 3 : Jouer quand notre modèle prédit une victoire à l'extérieur et que la côte est haute*\n",
    "\n",
    "Nous pouvons essayer d'aller encore plus loin en ne misant désormais que lorsque les côtes associées à nos paris à l'extérieur sont élevées : en effet, si notre modèle prédit une victoire à l'extérieur, et qu'en plus la côte est élevée, nous allons sûrement gagner encore plus d'argent, en moyenne. Nous allons donc désormais voir ce que nous aurions gagné si on ne misait que lorsque notre modèle prédit une victoire à l'éxterieur et que la côte est supérieure à 2 (valeur choisie arbitrairement)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "id": "X-ooeItPaz-i"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 23 /Benefices : 7.0600000000000005 € /Taux de retour sur investissement: 30.695652173913057 %\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Nice</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>0</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>4.72</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>0</td>\n",
       "      <td>3.55</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Brest</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>Nice</td>\n",
       "      <td>0</td>\n",
       "      <td>3.68</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Nimes</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>0</td>\n",
       "      <td>2.40</td>\n",
       "      <td>0</td>\n",
       "      <td>1.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>0</td>\n",
       "      <td>3.44</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Nimes</td>\n",
       "      <td>Lens</td>\n",
       "      <td>0</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Brest</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>0</td>\n",
       "      <td>2.30</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Lille</td>\n",
       "      <td>0</td>\n",
       "      <td>2.34</td>\n",
       "      <td>0</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>0</td>\n",
       "      <td>2.26</td>\n",
       "      <td>0</td>\n",
       "      <td>1.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Brest</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>0</td>\n",
       "      <td>2.57</td>\n",
       "      <td>0</td>\n",
       "      <td>1.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>0</td>\n",
       "      <td>2.37</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>0</td>\n",
       "      <td>2.64</td>\n",
       "      <td>0</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>Brest</td>\n",
       "      <td>Lille</td>\n",
       "      <td>0</td>\n",
       "      <td>2.12</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Nimes</td>\n",
       "      <td>Angers</td>\n",
       "      <td>0</td>\n",
       "      <td>2.63</td>\n",
       "      <td>0</td>\n",
       "      <td>1.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Lens</td>\n",
       "      <td>0</td>\n",
       "      <td>2.23</td>\n",
       "      <td>0</td>\n",
       "      <td>1.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>0</td>\n",
       "      <td>2.54</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>1.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Reims</td>\n",
       "      <td>Nice</td>\n",
       "      <td>0</td>\n",
       "      <td>2.95</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Angers</td>\n",
       "      <td>0</td>\n",
       "      <td>3.09</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        HomeTeam     AwayTeam  Prediction  Cote  Result  Benefice\n",
       "9     Strasbourg         Nice           0  3.50       0      2.50\n",
       "13        Nantes        Nimes           0  4.72       3     -1.00\n",
       "14    St Etienne      Lorient           0  3.55       3     -1.00\n",
       "15         Brest    Marseille           0  2.18       0      1.18\n",
       "18   Montpellier         Nice           0  3.68       3     -1.00\n",
       "24         Nimes       Rennes           0  2.40       0      1.40\n",
       "26      Paris SG    Marseille           0  5.00       0      4.00\n",
       "38        Nantes   St Etienne           0  3.44       1     -1.00\n",
       "47         Nimes         Lens           0  2.80       1     -1.00\n",
       "55         Brest       Monaco           0  2.30       3     -1.00\n",
       "57    Strasbourg        Lille           0  2.34       0      1.34\n",
       "64    Strasbourg         Lyon           0  2.26       0      1.26\n",
       "67        Nantes        Brest           0  3.50       3     -1.00\n",
       "71       Lorient    Marseille           0  2.57       0      1.57\n",
       "83         Dijon      Lorient           0  2.37       1     -1.00\n",
       "88    Strasbourg    Marseille           0  2.64       0      1.64\n",
       "91         Brest        Lille           0  2.12       3     -1.00\n",
       "95         Nimes       Angers           0  2.63       0      1.63\n",
       "102        Dijon         Lens           0  2.23       0      1.23\n",
       "108   Strasbourg       Rennes           0  2.54       1     -1.00\n",
       "113      Lorient  Montpellier           0  2.31       0      1.31\n",
       "126        Reims         Nice           0  2.95       1     -1.00\n",
       "128   St Etienne       Angers           0  3.09       1     -1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2020_strategie_3 = df_2020_strategie_2[df_2020_strategie_2['Cote'] > 2]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_3), '/Benefices :', sum(df_2020_strategie_3['Benefice']),\"€\",\n",
    "     '/Taux de retour sur investissement:', ((len(df_2020_strategie_3)+sum(df_2020_strategie_3['Benefice']))/len(df_2020_strategie_3)-1)*100, \"%\" )\n",
    "display(df_2020_strategie_3[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result', 'Benefice']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ici, les résultats commençent rééllement à devenir significatifs : nous obtenons un taux de retour sur investissement de 36,63 %, ce qui est extrêmement élevé dans le monde des paris sportifs. Il semble qu'ici, notre modèle puisse rééllement nous permettre de gagner de l'argent. Cependant, il faut tout de même tempérer ces résultats : la saison 2020 a été le théâtre d'un phénomène particulier : les équipes à l'extérieur gagnent plus souvent. Pour nous en convaincre, nous pouvons reproduire un graphique similaire à celui de notre partie 1 :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2020['Result'].hist(bins=15, label = 'Championnat 2020', align = 'left', density = True)\n",
    "df['Result'].hist(bins=15, label = 'Anciens championnats', align = 'right', density = True)\n",
    "plt.title('Repartition des résultats durant les deux différentes périodes')\n",
    "plt.xlabel(\"Resultat\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On constate en effet que la proportion de victoires à l'extérieur est plus élevée dans le championnat 2020. Cela vient du fait que les supporters ne sont plus autorisés dans les stades à cause de la crise sanitaire : cela fait ques les équipes à domicile, habituellement soutenues lorsqu'elles jouent chez elles, n'ont plus le \"douzième homme\" qui les pousse à se surpasser. Cet évènement n'avait pas été anticipé par les bookmakers, ou du moins a été sous-estimé, ce qui fait que les stratégies qui consistaient à miser sur les victoires à l'extérieur marchaient bien en cette période particulière. On peut d'ailleurs le vérifier :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.085763157894736 4.45728947368421 3.9110294117647055\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(data_ligue_1_2017['B365A']),np.mean(data_ligue_1_2018['B365A']),np.mean(df_2020['B365A']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La moyenne des côtes à l'extérieur a légèrement baissé entre 2018 et 2020, mais rien de significatif : de tels ecarts étaient déjà observés entre 2017 et 2018, sans changement particulier.\n",
    "Tout cela fait que nous avons peut-être juste eu de la chance d'avoir des métriques à l'éxtérieur encourageantes et que nous soyons partis dans cette voie. Maintenant que les bookmakers ont conscience de ce phénomène, rien ne nous dit que notre méthode va pouvoir rester éternellement fiable. Seul le temps nous le dira.\n",
    "\n",
    "Malgré tout, nos résultats sans encourageants, et il est sûr qu'il est possible de les améliorer. C'est ce que nous allons essayer de faire en Partie 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "id": "LTHWkJMt6S5_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.49      0.43      0.46       111\n",
      "           1       0.00      0.00      0.00       125\n",
      "           3       0.49      0.86      0.63       187\n",
      "\n",
      "    accuracy                           0.49       423\n",
      "   macro avg       0.33      0.43      0.36       423\n",
      "weighted avg       0.35      0.49      0.40       423\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(classification_report(Y_test, Y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZMEwSJAnp2uG"
   },
   "source": [
    "## **Partie 3 : Optimisation**\n",
    "\n",
    "Dans cette partie, l'objectif sera d'explorer différentes pistes afin d'essayer de pousser les performances de notre modèle au maximum afin d'obtenir les meilleurs résultats possibles.\n",
    "\n",
    "### A) La prédiction des matchs nuls\n",
    "\n",
    "Premièrement, attardons nous sur le problème des mauvaises prédiction de matchs nuls. Nous avions vu en partie 1 que notre modèle obtenait des métriques égales à 0 pour les matchs nuls : cela est récurrent dans les problèmes de classification et indique généralement que notre modèle ne prédit pas de matchs nuls (Result = 1).\n",
    "\n",
    "Essayons de regarder les métriques de notre modèle d'apprentissage : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "Xlx3-3AGqx-2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.49      0.38      0.43       278\n",
      "           1       0.00      0.00      0.00       243\n",
      "           3       0.52      0.87      0.65       465\n",
      "\n",
      "    accuracy                           0.52       986\n",
      "   macro avg       0.34      0.42      0.36       986\n",
      "weighted avg       0.38      0.52      0.43       986\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "Y_pred_train = lr.predict(X_train)\n",
    "print(classification_report(Y_train, Y_pred_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rK6mVlp9rlsI"
   },
   "source": [
    "On remarque que même dans le dataset d'apprentissage, notre modèle ne prédit bien aucun match nul.\n",
    "Comme nous l'avons dit, on a là un problème courant dans les problèmes de classification : notre modèle va avoir tendance à s'adapter aux probabilités \"inhérentes\" à chaque évènement. \n",
    "Ici, la probabilité qu'une équipe à domicile gagne est clairement plus élevée : nous avons vu que dans notre dataset, cela correspondait à 52% des observations. Ainsi, un modèle qui ne fait que prédire des victoires obtiendrait un 100% de recall sur les victoires et un recall total de 52%. c'est d'ailleurs exactement le weighted average du recall de notre modèle.\n",
    "Essayons de visualiser graphiquement nos prédictions :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "v=[]\n",
    "for k in np.linspace(0,3,3):\n",
    "    a = np.linspace(0,3,500)\n",
    "    b = lr.predict(pd.DataFrame(np.c_[[a,k*np.ones(500),np.ones(500),np.ones(500)]]).transpose())\n",
    "    plt.plot(a, b, label=\"Forme de l'équipe à domicile égale à %s\" % (k))\n",
    "    plt.legend(loc='best',\n",
    "           ncol=1, mode=\"expand\", borderaxespad=0.)\n",
    "\n",
    "    \n",
    "plt.title(\"Prédiction du régresseur en fonction du nombre de points moyen de l'équipe à domicile, en fixant toutes les autres données à 1\", loc='center')\n",
    "plt.xlabel(\"Nombre de points de l'équipe à domicile avant le match\")\n",
    "plt.ylabel('Résultat prédit', size=15)\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque bien sur la graphique que à Points Moyens et Forme de l'équipe à l'extérieur fixés, nos prédictions passent directement de 0 à 3 quand notre nombre de points à domicile augmente. Cela illsutre bien le fait qu'on ne passe jamais par la valeur 1, donc il semble bien que notre modèle ne prédise que des victoires ou des défaites, mais jamais de matchs nuls. Pour en être sur, nous pouvons représenter graphiquement nos prediction sur l'échantillon Test :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = pd.DataFrame(Y_pred).hist(bins=24, label=\"Prediction\", align=\"right\")\n",
    "pd.DataFrame(Y_test).hist(bins=24, label=\"Réalité\", ax=ax, align=\"left\")\n",
    "plt.title(\"Différence entre nos prédictions et la réalité, dans l'échantillon Test\")\n",
    "plt.xlabel('Resultat')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WIsjB9INy84Q"
   },
   "source": [
    "On remarque immédiatement que notre modèle ne prédit aucun \"1\" donc aucun match nul. Cependant il prédit bien des victoires à l'extérieur, comme nous l'avons vu précédement, dans un nombre relativement proche de leur nombre d'origine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "80-eqFvSzI3h"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2210953346855984"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(1 - np.count_nonzero(Y_pred_train)/len(Y_pred_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rm-dmRw8zOML"
   },
   "source": [
    "Il prédit 22% de victoires à l'extérieur, pour être précis. On a donc 78% de nos prédictions qui sont des victoires à domicile, ce qui est assez élevé.\n",
    "Peut être que cette absence de prédictions de matchs nuls vient du fait que nos variables explicatives expliquent très mal le phénomène de match nul. Essayons de rajouter des variables explicatives à notre modèle. \n",
    "On pourrait par exemple rajouter une donnée qui serait le nombre de matchs nuls moyens réalisé par chaque équipe avant leur match. \n",
    "Tout d'abord, implémentons cette donnée dans df, à la manière de nos colonnes crées dans la partie 1.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "IocHNFRF0URZ"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:671: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "      <th>DrawsHomeTeam</th>\n",
       "      <th>DrawsAwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19/08/16</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>Caen</td>\n",
       "      <td>3</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.712</td>\n",
       "      <td>1.712</td>\n",
       "      <td>0.290000</td>\n",
       "      <td>0.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Angers</td>\n",
       "      <td>Nice</td>\n",
       "      <td>0</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.712</td>\n",
       "      <td>0.290000</td>\n",
       "      <td>0.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>3</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.112</td>\n",
       "      <td>0.290000</td>\n",
       "      <td>0.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>Bastia</td>\n",
       "      <td>0</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>0.695000</td>\n",
       "      <td>1.112</td>\n",
       "      <td>1.112</td>\n",
       "      <td>0.290000</td>\n",
       "      <td>0.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20/08/16</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>0</td>\n",
       "      <td>2.195000</td>\n",
       "      <td>1.195000</td>\n",
       "      <td>1.712</td>\n",
       "      <td>1.312</td>\n",
       "      <td>0.290000</td>\n",
       "      <td>0.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1404</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Nice</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>3</td>\n",
       "      <td>1.409741</td>\n",
       "      <td>1.463475</td>\n",
       "      <td>1.200</td>\n",
       "      <td>2.200</td>\n",
       "      <td>0.306969</td>\n",
       "      <td>0.270853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1405</th>\n",
       "      <td>07/03/2020</td>\n",
       "      <td>Reims</td>\n",
       "      <td>Brest</td>\n",
       "      <td>3</td>\n",
       "      <td>1.408782</td>\n",
       "      <td>1.263929</td>\n",
       "      <td>1.200</td>\n",
       "      <td>1.200</td>\n",
       "      <td>0.407775</td>\n",
       "      <td>0.367500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>1.097476</td>\n",
       "      <td>1.324588</td>\n",
       "      <td>0.200</td>\n",
       "      <td>1.200</td>\n",
       "      <td>0.193985</td>\n",
       "      <td>0.343935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1407</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>3</td>\n",
       "      <td>1.727583</td>\n",
       "      <td>1.483823</td>\n",
       "      <td>1.400</td>\n",
       "      <td>1.400</td>\n",
       "      <td>0.197760</td>\n",
       "      <td>0.272999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1408</th>\n",
       "      <td>08/03/2020</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>3</td>\n",
       "      <td>1.712459</td>\n",
       "      <td>1.496378</td>\n",
       "      <td>2.400</td>\n",
       "      <td>1.600</td>\n",
       "      <td>0.156895</td>\n",
       "      <td>0.268028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1409 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    HomeTeam     AwayTeam  Result  PtsHomeTeam  PtsAwayTeam  \\\n",
       "0       19/08/16        Lyon         Caen       3     2.195000     2.195000   \n",
       "1       20/08/16      Angers         Nice       0     0.695000     2.195000   \n",
       "2       20/08/16       Lille        Dijon       3     0.695000     0.695000   \n",
       "3       20/08/16     Lorient       Bastia       0     0.695000     0.695000   \n",
       "4       20/08/16      Nantes       Monaco       0     2.195000     1.195000   \n",
       "...          ...         ...          ...     ...          ...          ...   \n",
       "1404  07/03/2020        Nice       Monaco       3     1.409741     1.463475   \n",
       "1405  07/03/2020       Reims        Brest       3     1.408782     1.263929   \n",
       "1406  08/03/2020  St Etienne     Bordeaux       1     1.097476     1.324588   \n",
       "1407  08/03/2020      Rennes  Montpellier       3     1.727583     1.483823   \n",
       "1408  08/03/2020       Lille         Lyon       3     1.712459     1.496378   \n",
       "\n",
       "      FormHomeTeam  FormAwayTeam  DrawsHomeTeam  DrawsAwayTeam  \n",
       "0            1.712         1.712       0.290000       0.290000  \n",
       "1            1.112         1.712       0.290000       0.290000  \n",
       "2            1.112         1.112       0.290000       0.290000  \n",
       "3            1.112         1.112       0.290000       0.290000  \n",
       "4            1.712         1.312       0.290000       0.290000  \n",
       "...            ...           ...            ...            ...  \n",
       "1404         1.200         2.200       0.306969       0.270853  \n",
       "1405         1.200         1.200       0.407775       0.367500  \n",
       "1406         0.200         1.200       0.193985       0.343935  \n",
       "1407         1.400         1.400       0.197760       0.272999  \n",
       "1408         2.400         1.600       0.156895       0.268028  \n",
       "\n",
       "[1409 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['DrawsHomeTeam'] = np.zeros(len(df)) \n",
    "df['DrawsAwayTeam'] = np.zeros(len(df))\n",
    "\n",
    "for team in df.drop_duplicates(['HomeTeam'])['HomeTeam']: \n",
    "  \n",
    "  average_draws_team = 0.29\n",
    "  nb_matches = 1\n",
    "\n",
    "  for k in range(len(df)): \n",
    "\n",
    "    if df['HomeTeam'].iloc[k] == team : \n",
    "      \n",
    "      df['DrawsHomeTeam'].iloc[k] = average_draws_team\n",
    "       \n",
    "      r = float(df['Result'].iloc[k]==1) # renvoie 1 si match nul, 0 sinon\n",
    "\n",
    "      average_draws_team = (average_draws_team*nb_matches + r)/(nb_matches+1)\n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "    \n",
    "    if df['AwayTeam'].iloc[k] == team : \n",
    "      \n",
    "      df['DrawsAwayTeam'].iloc[k] = average_draws_team\n",
    "\n",
    "      r = float(df['Result'].iloc[k]==1)\n",
    "\n",
    "      average_draws_team = (average_draws_team*nb_matches + r)/(nb_matches+1) \n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "\n",
    "    if nb_matches >= 39 : \n",
    "      nb_matches = 1 \n",
    "\n",
    "    \n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WAAsxELU60c6"
   },
   "source": [
    "Notre implémentation a bien fonctionné : on remarque notament que Reims, reputée réputée pour faire beaucoup de matchs nuls, est à 40 %, ce qui est très proche des valeurs que l'on peut trouver sur Internet (pas exactement la même car nos indicateurs sont construits sur plusieurs championnats).\n",
    "Etablissons un nouveau modèle :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "id": "Kwy6qumq6zZ5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3, 3, 0, 0])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_D = df[['PtsHomeTeam','PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam', 'DrawsHomeTeam', 'DrawsAwayTeam']]\n",
    "\n",
    "X_train_D, X_test_D, Y_train_D, Y_test_D = train_test_split(X_D, Y, test_size = 0.3, random_state=7)\n",
    "lr_draws = LogisticRegression()\n",
    "lr_draws.fit(X_train_D, Y_train_D)\n",
    "display(lr_draws.predict(X_test_D[:5]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "H_7wK_tO78fw"
   },
   "source": [
    "On remarque que l'implémentation de ces données ne change rien à nos prédictions précédente. Pour le 4 ème match, dont le résultat est un match nul, nous prédisons encore une victoire de l'équipe à l'extérieur, donc nous nous loupons encore la prédiction d'un match nul.\n",
    "Regardons à nouveau les métriques d'évaluation : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "id": "hwLLQZhc8Jtj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.48      0.42      0.45       111\n",
      "           1       0.00      0.00      0.00       125\n",
      "           3       0.49      0.84      0.62       187\n",
      "\n",
      "    accuracy                           0.48       423\n",
      "   macro avg       0.32      0.42      0.36       423\n",
      "weighted avg       0.34      0.48      0.39       423\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "Y_pred_D = lr_draws.predict(X_test_D)\n",
    "print(classification_report(Y_test_D, Y_pred_D))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6FFoH33H8xog"
   },
   "source": [
    "On voit que l'implémentation de ces nouvelles données ne change quasiment rien à nos résultats. On a encore des métriques égales à 0 pour les matchs nuls.\n",
    "\n",
    "Les matchs nuls sont donc des évènements trop aléatoires pour être correctement prédits. En effet, les matchs nuls sont des évènements qui sont relativement rares car \"ils tiennent à un but\". Les buts au football restent des évènements fondamentalement aléatoires et incertains et donc il est très risqué de se risquer à se prédire à des égalités. \n",
    "\n",
    "En réalité, il n'est pas si surprenant que notre modèle ne prédise jamais de matchs nuls. Si on regarde les sites de paris, on remarque que la côte du match nul est systématiquement plus élevée que la côte du favori. Cela veut dire que les sites de paris estiment qu'il y a toujours plus de chances pour qu'une des deux équipes gagne plutôt qu'il y ait match nul."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Div</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTR</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>...</th>\n",
       "      <th>Result</th>\n",
       "      <th>PtsHomeTeam</th>\n",
       "      <th>PtsAwayTeam</th>\n",
       "      <th>FormHomeTeam</th>\n",
       "      <th>FormAwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Mise</th>\n",
       "      <th>Benefice</th>\n",
       "      <th>Cote_du_favori</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 115 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Div, Date, Time, HomeTeam, AwayTeam, FTHG, FTAG, FTR, HTHG, HTAG, HTR, HS, AS, HST, AST, HF, AF, HC, AC, HY, AY, HR, AR, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, PSH, PSD, PSA, WHH, WHD, WHA, VCH, VCD, VCA, MaxH, MaxD, MaxA, AvgH, AvgD, AvgA, B365>2.5, B365<2.5, P>2.5, P<2.5, Max>2.5, Max<2.5, Avg>2.5, Avg<2.5, AHh, B365AHH, B365AHA, PAHH, PAHA, MaxAHH, MaxAHA, AvgAHH, AvgAHA, B365CH, B365CD, B365CA, BWCH, BWCD, BWCA, IWCH, IWCD, IWCA, PSCH, PSCD, PSCA, WHCH, WHCD, WHCA, VCCH, VCCD, VCCA, MaxCH, MaxCD, MaxCA, AvgCH, AvgCD, AvgCA, B365C>2.5, B365C<2.5, PC>2.5, PC<2.5, MaxC>2.5, MaxC<2.5, AvgC>2.5, AvgC<2.5, AHCh, B365CAHH, B365CAHA, PCAHH, ...]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 115 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2020['Cote_du_favori']=df_2020[['MaxA','MaxH']].apply(min, axis = 1)\n",
    "df_2020[df_2020['Cote_du_favori']>df_2020['MaxD']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il n'y a aucun endroit ou la côite du favori est supérieur à la côte du match nul.\n",
    "Ainsi, si les sites de paris eux-mêmes devaient parier, ils ne prédiraient jamais de match nuls.\n",
    "\n",
    "Cependant, il est tout de même possible d'assigner une probabilité à cet évènement incertain : elle sera très souvent faible certes, mais existante.\n",
    "Il devient alors ici important de préciser ce que \"battre\" un site de paris sportifs veut clairement dire.\n",
    "\n",
    "### B) Battre un site de paris sportifs\n",
    "\n",
    "Jusqu'ici nous avons été relativement flous sur cette notion. Mais concrètement, pour battre un site de paris sportifs, il ne faut pas vraiment \"bien deviner\" le résultat des matchs, comme on le laissait entendre à la fin de la partie 1 dans un soucis de simplification. Il s'agit de mieux connaître les probabilités réelles du résultats d'un match que le site de paris sportifs. \n",
    "L'existence de côtes rend en effet le système de paris beaucoup plus fluide : on peut avoir une epserance de gains positive même si la plupart de nos prédictions sont incorrectes. Si nous parrions sur des résultats avec de très grandes côtes, ce sont, comme on l'a vu en partie 2, des évènements très incertains. Mais si la côte qui y est associée est assez grande, alors il peut être rentable (en moyenne) de parier sur ce match.\n",
    "Par exemple, si selon notre modèle, Dijon n'a que 10% de battre Paris, mais que la côte est à 15, alors l'espérance de gains est de +1,5 fois notre mise.\n",
    "\n",
    "Lorsque nous pensons que les probabilités d'un résultat sont plus grandes que ce que prédit le site de paris sportifs, alors nous avons un \"value bet\". Si nous avons raison, alors à terme, nous devrions avoir une espérance de gain positive, selon la loi faible des grands nombres. Or nous savons que la côte que propose un site de paris sportifs est toujours le reflet des probabilités qu'il attribue à chaque évènement, commme nous l'avons vu en Partie 2. Et nous savons aussi que notre modèle nous prédira toujours le Résultat dont la valeur est la plus probable, et non pas forcément des Value Bet. En réalité, nous jouions n'importe comment en partie 2, ou plutôt de manière très incertaine. \n",
    "\n",
    "Prenons un exemple : même si notre régresseur prédit bien une victoire du Paris Saint Germain, ce qui est intéréssant serait de connaître la probabilité qu'il associait à cette prediction : si elle est plus faible que la probabilité prédite par le site de paris sportifs, alors nous n'avons pas intérêt à parier sur le PSG, car cela nous donnera une espérance de gains négatives, alors que nous avons raison. \n",
    "\n",
    "Pour être concret, si notre modèle prédit parfaitement la probabilité que Paris gagne son match contre, par exemple, Dijon, qui est égale à 70%, mais que le site de paris sportifs a mis une côte à 1.15 pour la victoire de Paris, alors cela veut dire que le site de paris sportifs pense que la proba est de 0.85/1.15 (selon la partie 2) soit 74%. Cela veut alors dire qu'on n'a pas intérêt à parier, en témoigne ce calcul :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-204.20000000000005"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.binomial(1000, 0.70)*1.15-1000 # On mise 1000 fois 1 euro sur un évènement qui a un probabilité 0.70 de se réaliser.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cela montre bien que même si Paris est le résultat le plus probable, on n'a pas intérêt à miser dessus. Il est donc **primordial** de connaître les probabilités prédites par notre modèle pour pouvoir parier efficacement.\n",
    "Cela tombe bien, la fonction predict d'une classification linéaire peut nous donner les probabilités associées à chaque évènement, ce qui sera bien plus intéréssant dans notre cadre de paris."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.27719476, 0.27760551, 0.44519973],\n",
       "       [0.0983092 , 0.1738826 , 0.7278082 ],\n",
       "       [0.32328405, 0.26571856, 0.41099738],\n",
       "       [0.43299573, 0.26380845, 0.30319582],\n",
       "       [0.41267983, 0.24433202, 0.34298815]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([[0.27873042, 0.28144803, 0.43982155],\n",
       "       [0.10048818, 0.17880643, 0.72070539],\n",
       "       [0.31933412, 0.26687817, 0.41378771],\n",
       "       [0.44092966, 0.25412393, 0.30494642],\n",
       "       [0.41781785, 0.24015495, 0.3420272 ]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(lr_draws.predict_proba(X_test_D.head()),lr.predict_proba(X_test.head()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On obtient ici les probabilités associées aux différents résultats des premiers matchs de l'échantillon test. On remarque que ces probabilités varient très peu entre nos deux modèles, on va donc utiliser le premier, car il utilise moins de features. A l'aide de cette option, nous allons pouvoir adopter une nouvelle stratégie, censée être bien plus efficace.\n",
    "\n",
    "### *Strategie 4 : Miser sur des value bets*\n",
    "\n",
    "Le principe de cette stratégie consiste à ne miser que quand nous prédisons qu'un résultat a plus de chances de se produire que ce que prévoit le site de paris sportifs. Pour cela, nous convertissons nous probabilités en côtes, et si la côte du site de paris sportifs est plus grande sur un évènement que la notre, alors cela veut dire qu'il sous estime les chances de l'évènement et donc qu'on a intérêt à miser dessus. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.59</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>3</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>3</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.08</td>\n",
       "      <td>1</td>\n",
       "      <td>3.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>0</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>0</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.90</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result  Benefice\n",
       "0      Bordeaux      Nantes           3  2.59       1     -1.00\n",
       "1         Dijon      Angers           3  2.86       0     -1.00\n",
       "2         Lille      Rennes           3  2.38       1     -1.00\n",
       "3        Monaco       Reims           0  4.50       1     -1.00\n",
       "4       Lorient  Strasbourg           3  2.75       3      1.75\n",
       "..          ...         ...         ...   ...     ...       ...\n",
       "133     Lorient       Nimes           0  3.50       3     -1.00\n",
       "134      Nantes       Dijon           1  4.08       1      3.08\n",
       "135  Strasbourg        Metz           0  4.09       1     -1.00\n",
       "136       Lille    Bordeaux           0  5.75       3     -1.00\n",
       "137    Paris SG        Lyon           1  4.90       0     -1.00\n",
       "\n",
       "[138 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def chercheur_value_bet(x) : # Nous devons définir une fonction qui cherchera la prédiction à faire en suivant\n",
    "    # Notre stratégie de value_bet. Nous cherchons la côte du site de paris sportifs dont la différence avec\n",
    "    # la notre est la plus élevée.\n",
    "    \n",
    "    a = max(x.MaxH-x.CotePrediteH, x.MaxD-x.CotePrediteD, x.MaxA-x.CotePrediteA, 0)\n",
    "    \n",
    "    if a == x.MaxH-x.CotePrediteH :\n",
    "        return(3)\n",
    "    elif a == x.MaxD-x.CotePrediteD :\n",
    "        return(1)\n",
    "    elif a == x.MaxA-x.CotePrediteA :\n",
    "        return(0)\n",
    "    else :\n",
    "        return(3) # On mise sur l'equipe à domicile si jamais on ne trouve aucun value bet\n",
    "\n",
    "\n",
    "def strategie_4(dataframe, model=lr): #Nous pouvons désormais appliquer notre stratégie à notre DataFrame principal.\n",
    "    \n",
    "    for k in ['CotePrediteH','CotePrediteD','CotePrediteA']:\n",
    "        dataframe[k] = np.zeros(len(dataframe))# Nous créons des colonnes de Côte Prédite.\n",
    "    \n",
    "    dataframe[['CotePrediteA','CotePrediteD','CotePrediteH']] = 0.85/(model.predict_proba(dataframe[['PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']])) \n",
    "    # Nous remplissons ces colonnes fraichement créées. Il faut faire très attention : la fonction predict proba renvoie la probabilité de 0 en premier.\n",
    "    \n",
    "    dataframe['Prediction'] = dataframe.apply(chercheur_value_bet, axis=1)\n",
    "    \n",
    "    dataframe['Cote'] = dataframe.apply(chercheur_cote, axis=1) \n",
    "    \n",
    "    dataframe['Mise'] = 1 # Ici, nous misons 1 euro à chaque fois.\n",
    "    \n",
    "    dataframe['Benefice'] = dataframe.apply(benefices_pari, axis = 1)\n",
    "    \n",
    "    return(dataframe)\n",
    "\n",
    "    \n",
    "df_2020_strategie_4 = strategie_4(df_2020)\n",
    "\n",
    "display(df_2020_strategie_4[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result', 'Benefice']])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On commence par remarquer que l'on mise beaucoup plus sur des matchs nuls qu'avant, alors que notre modèle n'en prédit aucun. On remarque aussi que les -1 semblent encore plus nombreux que précément, mais on remarque aussi que nos bénéfices semblent un peu plus élevés : on mise en général sur des côtes plus hautes que nos 3 premières stratégies. Une fois de plus, regardons ce que cela donne sur l'ensemble du championnat 2020 :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 138 /Benefices : -10.710166799945796 €\n"
     ]
    }
   ],
   "source": [
    "print('Nombre de matchs:',len(df_2020_strategie_4), '/Benefices :', sum(df_2020_strategie_4['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le résultat est un peu decevant : nous gagnons moins d'argent que dans nos premières stratégies.\n",
    "Cela vient peut être du fait que nous sommes très imprécis sur la prédiction de matchs nuls, et donc sur l'estimation de leurs probabilités réelles.\n",
    "\n",
    "### *Stratégie 5 : Miser sur les value bets extérieur*\n",
    "\n",
    "Comme dans la Partie 2, on peut essayer d'écarter les paris sur lesquels on sait qu'on est imprécis, ici, les matchs nuls et les victoires à domicile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 567,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 60 /Benefices : -3.6403751823753856 €\n"
     ]
    }
   ],
   "source": [
    "df_2020_strategie_5 = df_2020_strategie_4[df_2020_strategie_4['Prediction'] == 0]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_5), '/Benefices :', sum(df_2020_strategie_5['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On voit que nous arrivons à redevenir gagnants en ne misant que sur les victoires à l'extérieur : une fois de plus, cela peut tou simplement s'expliquer par le fait que 2020 était une bonne année pour miser à l'extérieur.\n",
    "\n",
    "### *Stratégie 6 : Faire varier les mises*\n",
    "\n",
    "Nous pouvons essayer d'aller encore plus loin et tenter de jouer sur nos value bets pour obtenir de meilleurs résultats. Tous les value bets n'ont pas la même valeur : dans ceratins cas, la côte du site de paris sportifs est assez proche de ce que nous prédisons, defois, l'écart est plus grand. On pourrait alors essayer d'adapter nos mises en fonction de nos value_bet : plus le site de paris sportifs se trompe par rapport à nos prédictions, plus on va miser gros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 568,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Mise</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.59</td>\n",
       "      <td>1</td>\n",
       "      <td>0.814657</td>\n",
       "      <td>-0.814657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>3</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0</td>\n",
       "      <td>0.728559</td>\n",
       "      <td>-0.728559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1</td>\n",
       "      <td>0.635358</td>\n",
       "      <td>-0.635358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>1</td>\n",
       "      <td>1.351090</td>\n",
       "      <td>-1.351090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>3</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3</td>\n",
       "      <td>0.939256</td>\n",
       "      <td>1.643698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>0.812684</td>\n",
       "      <td>-0.812684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.08</td>\n",
       "      <td>1</td>\n",
       "      <td>0.947639</td>\n",
       "      <td>2.918727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>0</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "      <td>1.723906</td>\n",
       "      <td>-1.723906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>0</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1.034182</td>\n",
       "      <td>-1.034182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.90</td>\n",
       "      <td>0</td>\n",
       "      <td>1.629498</td>\n",
       "      <td>-1.629498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result      Mise  Benefice\n",
       "0      Bordeaux      Nantes           3  2.59       1  0.814657 -0.814657\n",
       "1         Dijon      Angers           3  2.86       0  0.728559 -0.728559\n",
       "2         Lille      Rennes           3  2.38       1  0.635358 -0.635358\n",
       "3        Monaco       Reims           0  4.50       1  1.351090 -1.351090\n",
       "4       Lorient  Strasbourg           3  2.75       3  0.939256  1.643698\n",
       "..          ...         ...         ...   ...     ...       ...       ...\n",
       "133     Lorient       Nimes           0  3.50       3  0.812684 -0.812684\n",
       "134      Nantes       Dijon           1  4.08       1  0.947639  2.918727\n",
       "135  Strasbourg        Metz           0  4.09       1  1.723906 -1.723906\n",
       "136       Lille    Bordeaux           0  5.75       3  1.034182 -1.034182\n",
       "137    Paris SG        Lyon           1  4.90       0  1.629498 -1.629498\n",
       "\n",
       "[138 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def calculateur_mise(x):\n",
    "    P = Resultat_inverse(x.Prediction) \n",
    "    delta = x['Max'+ P] - x['CotePredite'+ P]\n",
    "    return(delta) # Plus l'écart est grand, plus notre mise est grande (la focntion identité a été définie arbitrairement)\n",
    "\n",
    "def strategie_6(dataframe): #Nous pouvons désormais appliquer notre stratégie à notre DataFrame principal.\n",
    "    \n",
    "    dataframe[['CotePrediteA','CotePrediteD','CotePrediteH']] = 0.85/(lr.predict_proba(dataframe[['PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']])) \n",
    "    # Nous créons des colonnes de Côte Prédite.\n",
    "    \n",
    "    dataframe['Prediction'] = dataframe.apply(chercheur_value_bet, axis=1)\n",
    "    \n",
    "    dataframe['Cote'] = dataframe.apply(chercheur_cote, axis=1) \n",
    "    \n",
    "    dataframe['Mise'] = dataframe.apply(calculateur_mise, axis=1) # Ici, nous faisons varier les mises\n",
    "    \n",
    "    dataframe['Benefice'] = dataframe.apply(benefices_pari, axis=1)\n",
    "    \n",
    "    return(dataframe)\n",
    "\n",
    "    \n",
    "df_2020_strategie_6 = strategie_6(df_2020)\n",
    "\n",
    "display(df_2020_strategie_6[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result','Mise', 'Benefice']])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On voit que nos bénéfices sont encore plus variables, et il semble qu'ils ne s'équilibrent pas vraiment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 569,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 138 /Benefices : -144.499680485619 €\n"
     ]
    }
   ],
   "source": [
    "print('Nombre de matchs:',len(df_2020_strategie_6), '/Benefices :', sum(df_2020_strategie_6['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ici, il est clair que la stratégie est mauvaise : cette méthode exacerbe nos erreurs d'estimation, et donc lorsque l'on fait des erreurs, celles-ci coûtent plus cher. Essayons de regarder ce que donnent nos bénéfices uniquement sur les victoires à l'extérieur, pour voir si ces pertes importantes proviennent, comme la dernière fois, de l'imprecision de notre modèle pour prédire les matchs nuls.\n",
    "\n",
    "### *Stratégie 7 : Miser sur les value bets extérieurs en faisant varier les mises*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 570,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 60 /Benefices : -109.37675687648635 €\n"
     ]
    }
   ],
   "source": [
    "df_2020_strategie_7 = df_2020_strategie_6[df_2020_strategie_6['Prediction'] == 0]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_7), '/Benefices :', sum(df_2020_strategie_7['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous sommes largement perdants, une fois de plus. On en conclut donc que c'est une mauvaise idée de faire varier nos mises en fonction croissante de l'écart de la côte de notre value bet et de la côte du pari sportif : bien souvent, quand cette différence est grande, il s'agira d'une erreur d'véaluation de notre part, et non pas d'une erreur d'évaluation du site de paris sportifs.\n",
    "\n",
    "Nous pourrions alors essayer d'adopter des stratégies qui consisteraient à lisser les risques que l'on prend, c'est à dire faire varier nos mises de manière décroissante avec l'écart des côtes : on part du principe que c'est sûrement nous qui nous trompons, et non pas le site de paris sportifs.\n",
    "\n",
    "### *Stratégie 8 : Faire varier les mises...différement*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 571,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Mise</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.59</td>\n",
       "      <td>1</td>\n",
       "      <td>1.107930</td>\n",
       "      <td>-1.107930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>3</td>\n",
       "      <td>2.86</td>\n",
       "      <td>0</td>\n",
       "      <td>1.171568</td>\n",
       "      <td>-1.171568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>3</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1</td>\n",
       "      <td>1.254558</td>\n",
       "      <td>-1.254558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0.860316</td>\n",
       "      <td>-0.860316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>3</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1.031830</td>\n",
       "      <td>1.805702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>1.109274</td>\n",
       "      <td>-1.109274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.08</td>\n",
       "      <td>1</td>\n",
       "      <td>1.027256</td>\n",
       "      <td>3.163948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>0</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "      <td>0.761629</td>\n",
       "      <td>-0.761629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>0</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3</td>\n",
       "      <td>0.983335</td>\n",
       "      <td>-0.983335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>1</td>\n",
       "      <td>4.90</td>\n",
       "      <td>0</td>\n",
       "      <td>0.783381</td>\n",
       "      <td>-0.783381</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result      Mise  Benefice\n",
       "0      Bordeaux      Nantes           3  2.59       1  1.107930 -1.107930\n",
       "1         Dijon      Angers           3  2.86       0  1.171568 -1.171568\n",
       "2         Lille      Rennes           3  2.38       1  1.254558 -1.254558\n",
       "3        Monaco       Reims           0  4.50       1  0.860316 -0.860316\n",
       "4       Lorient  Strasbourg           3  2.75       3  1.031830  1.805702\n",
       "..          ...         ...         ...   ...     ...       ...       ...\n",
       "133     Lorient       Nimes           0  3.50       3  1.109274 -1.109274\n",
       "134      Nantes       Dijon           1  4.08       1  1.027256  3.163948\n",
       "135  Strasbourg        Metz           0  4.09       1  0.761629 -0.761629\n",
       "136       Lille    Bordeaux           0  5.75       3  0.983335 -0.983335\n",
       "137    Paris SG        Lyon           1  4.90       0  0.783381 -0.783381\n",
       "\n",
       "[138 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculateur_mise_2(x):\n",
    "    P = Resultat_inverse(x.Prediction) \n",
    "    delta = x['Max'+ P] - x['CotePredite'+ P]\n",
    "    return(1/math.sqrt(delta)) # Principe de précaution : Plus l'écart est grand, plus notre mise est petite (la focntion identité a été définie arbitrairement)\n",
    "\n",
    "def strategie_8(dataframe): #Nous pouvons désormais appliquer notre stratégie à notre DataFrame principal.\n",
    "    \n",
    "    dataframe[['CotePrediteA','CotePrediteD','CotePrediteH']] = 0.85/(lr.predict_proba(dataframe[['PtsHomeTeam', 'PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam']])) \n",
    "    # Nous créons des colonnes de Côte Prédite.\n",
    "    \n",
    "    dataframe['Prediction'] = dataframe.apply(chercheur_value_bet, axis=1)\n",
    "    \n",
    "    dataframe['Cote'] = dataframe.apply(chercheur_cote, axis=1) \n",
    "    \n",
    "    dataframe['Mise'] = dataframe.apply(calculateur_mise_2, axis=1) # Ici, nous faisons varier les mises\n",
    "    \n",
    "    dataframe['Benefice'] = dataframe.apply(benefices_pari, axis=1)\n",
    "    \n",
    "    return(dataframe)\n",
    "\n",
    "    \n",
    "df_2020_strategie_8 = strategie_8(df_2020)\n",
    "\n",
    "display(df_2020_strategie_8[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result','Mise', 'Benefice']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 572,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 138 /Benefices : -10.710166799945796 €\n"
     ]
    }
   ],
   "source": [
    "print('Nombre de matchs:',len(df_2020_strategie_6), '/Benefices :', sum(df_2020_strategie_6['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 573,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 60 /Benefices : -3.6403751823753856 €\n"
     ]
    }
   ],
   "source": [
    "df_2020_strategie_9 = df_2020_strategie_8[df_2020_strategie_8['Prediction'] == 0]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_9), '/Benefices :', sum(df_2020_strategie_9['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On obtient alors de meilleurs résultats, mais cela semble toujours insuffisant. On arrive au mieux à ne perdre que 3 euros, probablement car nous avons limité les risques. Au vu de ces résultats, qui utilisent des méthodes bien plus précises et oprimisées qu'en partie 1, il semble bien que nos bons résultats de regression logistique de la Partie 2 s'expliquent par de la chance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### C) Changement d'indicateurs ?\n",
    "\n",
    "Dès le début du projet, nous avons décidé de travailler avec le nombre de points moyen de chaque équipe. Désormais, nous pouvons essayer de remettre en question ce choix : aurait-on obtenu de meilleurs résultats en créant des indicateurs différents pour chaque équipe ? Par exemple, si nous avions pris le nombre de points au lieu du nombre moyen de points, nous aurions :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 574,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "Index(['HomeTeam'], dtype='object')",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-574-5bdbb1a3a189>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PtsAwayTeam'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mteam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop_duplicates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'HomeTeam'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'HomeTeam'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mpts_team\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop_duplicates\u001b[0;34m(self, subset, keep, inplace, ignore_index)\u001b[0m\n\u001b[1;32m   4809\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4810\u001b[0m         \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidate_bool_kwarg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"inplace\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4811\u001b[0;31m         \u001b[0mduplicated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mduplicated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkeep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4813\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mduplicated\u001b[0;34m(self, subset, keep)\u001b[0m\n\u001b[1;32m   4883\u001b[0m         \u001b[0mdiff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdifference\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4884\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4885\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4886\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4887\u001b[0m         \u001b[0mvals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msubset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: Index(['HomeTeam'], dtype='object')"
     ]
    }
   ],
   "source": [
    "df['PtsHomeTeam'] = np.zeros(len(df)) \n",
    "df['PtsAwayTeam'] = np.zeros(len(df))\n",
    "\n",
    "for team in df.drop_duplicates(['HomeTeam'])['HomeTeam']:\n",
    "  \n",
    "  pts_team = 0\n",
    "  nb_matches = 0\n",
    "\n",
    "  for k in range(len(df)): \n",
    "        \n",
    "    if df['HomeTeam'].iloc[k] == team : \n",
    "      \n",
    "      df['PtsHomeTeam'].iloc[k] = pts_team\n",
    "       \n",
    "      r = df['Result'].iloc[k] \n",
    "\n",
    "      pts_team = (pts_team + r)\n",
    "    \n",
    "      nb_matches = nb_matches+1\n",
    "    \n",
    "    if df['AwayTeam'].iloc[k] == team : \n",
    "        \n",
    "      df['PtsAwayTeam'].iloc[k] = pts_team\n",
    "\n",
    "      r = df['Result'].iloc[k]\n",
    "\n",
    "      pts = (1/2)*r**2 - (5/2)*r + 3 # Attention, il faut bien appliquer une fonction à r car ici on compte les points de l'equipe à l'extérieur. Cette fonction est la fonction la plus simple vérifiant f(3)=0, f(1)=1, f(0)=3.\n",
    "      \n",
    "      pts_team = pts_team + pts\n",
    "      \n",
    "      nb_matches = nb_matches+1\n",
    "\n",
    "    if nb_matches >= 38 : \n",
    "      nb_matches = 0\n",
    "      pts_team = 0\n",
    "   \n",
    "display(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3, 3, 0, 0, 0])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_new = df[['PtsHomeTeam','PtsAwayTeam', 'FormHomeTeam', 'FormAwayTeam', 'DrawsHomeTeam', 'DrawsAwayTeam']]\n",
    "\n",
    "X_train_new, X_test_new, Y_train_new, Y_test_new = train_test_split(X_new, Y, test_size = 0.3, random_state=7)\n",
    "lr_new = LogisticRegression()\n",
    "lr_new.fit(X_train_new, Y_train_new)\n",
    "display(lr_new.predict(X_test_new.head()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ici, les predictions sur notre échantillon test changent : mais pas dans le bon sens, étant donné qu'on se trompe sur un match supplémentaire."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.43      0.35      0.39       111\n",
      "           1       0.00      0.00      0.00       125\n",
      "           3       0.49      0.87      0.63       187\n",
      "\n",
      "    accuracy                           0.48       423\n",
      "   macro avg       0.31      0.41      0.34       423\n",
      "weighted avg       0.33      0.48      0.38       423\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "Y_pred_new = lr_new.predict(X_test_new)\n",
    "print(classification_report(Y_test_new, Y_pred_new))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il semble que nos métriques d'évaluation sont un peu moins bonnes que précédemment. La différence n'est pas grande, mais il semble bien que notre indicateur de points moyens est plus pertinent que simplement l'indicateurs du nombre de points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(Y_pred, label=\"Anciennes Predictions\", align='left')\n",
    "plt.hist(Y_pred_new, label=\"Nouvelles Predictions\", align='mid')\n",
    "plt.hist(Y_test,label=\"Réalité\", align='right')\n",
    "plt.title(\"Différence entre nos prédictions et la réalité, dans l'échantillon Test\")\n",
    "plt.xlabel('Resultat')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ce graphique montre assez clairement que nos anciennes prédictions collaient un petit peu mieux à la réalité que les nouvelles."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### D) Score de validation croisée , préprocessing et hyperparamètres \n",
    "\n",
    "Pour finir cette partie d'optimisation, nous allons essayer d'utiliser des fonctionnalités plus avancées de skicit learn afin d'utiliser des méthodes plus perfectionnées et précises de Machine Learning.\n",
    "##### a) Score de validation croisée\n",
    "\n",
    "Nous pouvons tout d'abord nous demander si notre Régression Logistique était le modèle le plus efficace à appliquer. Essayons de voir ce que nous obtenons pour une RandomForest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "id": "QoiTjVNI8v4s"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.37      0.36      0.37       111\n",
      "           1       0.36      0.22      0.27       125\n",
      "           3       0.53      0.67      0.59       187\n",
      "\n",
      "    accuracy                           0.46       423\n",
      "   macro avg       0.42      0.42      0.41       423\n",
      "weighted avg       0.44      0.46      0.44       423\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, Y_train)\n",
    "Y_pred_rf = rf.predict(X_test)\n",
    "print(classification_report(Y_test, Y_pred_rf))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il semble que la RandomForest soit légèrement meilleure : on remarque que la precision moyenne est plus élevée que pour la classifcation linéaire, et notre modèle prédit désormais des matchs nuls, de manière plutôt précise au vu de leur incertitude. Cependant, nous avons vu en A) de la partie 3 que ce n'était pas frocément une bonne chose que notre modèle se mette à prédire des matchs nuls. On remarque aussi que la precision des victoires à l'extérieur a grandement baissé.\n",
    "\n",
    "Il est donc assez difficile d'estimer qui entre la régresison et la RandomForest est la meilleure. Pour essayer de disciminer un des deux modèles, nous pouvons utiliser le score de validation croisée, qui va permettre de rendre les résultats indépendants de notre X_test et Y_test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "id": "UdndTfob7DCQ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.41730926602858387 0.3715534803521757\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "if not sys.warnoptions:\n",
    "    import warnings\n",
    "    warnings.simplefilter(\"ignore\") # Nous allons ici cacher des messages warnings qui sont très nombreux, dans un soucis d'esthétique et de présentation.\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "print(cross_val_score(RandomForestClassifier(random_state=7), X, Y, cv=5, scoring='precision_weighted').mean(), cross_val_score(LogisticRegression(random_state=7), X, Y, cv=5, scoring = 'precision_weighted').mean()) \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "p1RdphTv7vGs"
   },
   "source": [
    "Une fois de plus, les résultats ne sont pas vraiment disciminants, même si la RandomForest semble légèrement meilleure : la différence entre ces deux résultats est aléatoire et dépend de la random seed que nous avons prise, ainsi que du cv. Ici, nous avons pris un cv égal à 5-fold. Peut-être qu'en faisant varier cette valeur, nous pourrions obtenir une valeur de cv discriminante.\n",
    "Regardons tout de même sur plusieurs valeurs de k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "id": "0a7OPIRJ8An_"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def moyenne_score(modèle, k, n):\n",
    "    v = []\n",
    "    for i in range(n):\n",
    "        v.append(cross_val_score(modèle, X, Y, cv=k, scoring='precision_weighted').mean())\n",
    "    return np.mean(v) # Pour que nos résultats soient moins variables, on définit une fonction qui permet de faire la moyenne\n",
    "#de différents scores de validation croisée, car ces scores sont aléatoires.\n",
    "\n",
    "a = [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25]\n",
    "v = [np.array(moyenne_score(LogisticRegression(), k, 3)) for k in a] # Ici on ne fait une moyenne que sur 3 échantillons car notre programme \n",
    "#met déjà environ 1 minute à s'éxecuter.\n",
    "u = [np.array(moyenne_score(RandomForestClassifier(), k, 3)) for k in a]\n",
    "plt.figure()\n",
    "plt.title('Evolution de la precision moyenne en validation croisée pour k-fold CV, en fonction de k')\n",
    "plt.plot(a, v, '-b', label='Regression Logistique')\n",
    "plt.plot(a, u, '-r', label='Random Forest')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Moyenne pour 3 k-fold CV')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3gWZMCsrCevM"
   },
   "source": [
    "On voit que la Random Forest semble être la meilleure pour un k égal à 2. On voit que moins kest elevé, plus nos résultats sont bons : on a notamment une grande baisse de précision dès qu'on dépasse k=3. Le cross val score nous a donc permis d'identifier la Random Forest comme étant la meilleure méthode. (Attention cependant, ici nos résultats sont aléatoires, c'est simplement le fonction moyenne_score qui permet de réduire la variance du score. Cependant, notre n=3 ne permet pas de sécuriser totalement cette conclusion, mais nous ne voulions pas d'un programme qui tourne trop longtemps).\n",
    "\n",
    "##### b) Le pre-processing des données\n",
    "\n",
    "La plupart des messages d'erreurs avertissent sur le fait qu'on a pas fait de préprocessing sur nos données, qui est pourtant une étape importante pour s'assurer que nos algorithmes de Machine Learning fonctionnent bien. Nous allons appliquer un preprocessing à X et voir ce que cela change sur nos resultats.\n",
    "Un preprocessing consiste à transformer X de manière à lui donner la répartition que l'on souhaite : génèralement, une forme de Gaussienne. Commençons par regarder la répartition de notre X_test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig = plt.figure(figsize = (20, 4))\n",
    "plt.suptitle('Histogrammes de répartition de nos indicateurs dans notre échantillon-train')\n",
    "plt.subplot(141)\n",
    "plt.hist(X_train['PtsHomeTeam'], color='c', label=\"Points moyens des équipe à domicile\")\n",
    "plt.legend()\n",
    "plt.subplot(142)\n",
    "plt.hist(X_train['PtsAwayTeam'], color='m', label=\"Points moyens des équipe à l'extérieur\")\n",
    "plt.legend()\n",
    "plt.subplot(143)\n",
    "plt.hist(X_train['FormHomeTeam'], color='y', label=\"Forme des équipe à domicile\")\n",
    "plt.legend()\n",
    "plt.subplot(144)\n",
    "plt.hist(X_train['FormAwayTeam'], color='g', label=\"Forme des équipe à l'extérieur\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque que les histogrammes ressemblent déjà beaucoup à des gaussiennes. On remarque tout de même que les indicateurs de forme comportent des trous, car ils ils ne peuvent sauter que de 0.3 en 0.3 (s'agissant d'une moyenne de points sur les 5 denriers matchs). Il est aussi rassurant de voir que les indicateurs à domicile et les indicateurs à l'extérieur sont globalement les mêmes, que ce soit pour les points ou la forme : ils représentent, à l'échelle macroscopique, à peu près la même chose, comme chaque equipe alterne entre jouer à domicile et à l'extérieur, ces idnciateurs contiennent les datas de toutes les équipes.\n",
    "\n",
    "Essayons désormais d'appliquer un préprocessing à ces données :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  0             1             2             3\n",
      "count  9.860000e+02  9.860000e+02  9.860000e+02  9.860000e+02\n",
      "mean   6.429385e-17 -1.154137e-16  3.413992e-16 -2.043103e-16\n",
      "std    1.000507e+00  1.000507e+00  1.000507e+00  1.000507e+00\n",
      "min   -2.454108e+00 -2.477647e+00 -2.053850e+00 -2.110938e+00\n",
      "25%   -6.646036e-01 -6.694030e-01 -8.302176e-01 -8.852042e-01\n",
      "50%   -1.210926e-01 -1.181734e-01 -1.344320e-02  3.409616e-02\n",
      "75%    4.498620e-01  4.548563e-01  6.993224e-01  6.469631e-01\n",
      "max    3.274864e+00  3.259578e+00  2.534770e+00  2.485564e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = preprocessing.StandardScaler().fit(X_train)\n",
    "X_train_scaled = pd.DataFrame(scaler.transform(X_train))\n",
    "\n",
    "print(X_train_scaled.describe())\n",
    "\n",
    "fig = plt.figure(figsize = (20, 4))\n",
    "plt.suptitle('Histogrammes de répartition de nos indicateurs dans notre échantillon-train')\n",
    "plt.subplot(141)\n",
    "plt.hist(X_train_scaled[0], color='c', label=\"Points moyens des équipe à domicile\")\n",
    "plt.legend()\n",
    "plt.subplot(142)\n",
    "plt.hist(X_train_scaled[1], color='m', label=\"Points moyens des équipe à l'extérieur\")\n",
    "plt.legend()\n",
    "plt.subplot(143)\n",
    "plt.hist(X_train_scaled[2], color='y', label=\"Forme des équipe à domicile\")\n",
    "plt.legend()\n",
    "plt.subplot(144)\n",
    "plt.hist(X_train_scaled[3], color='g', label=\"Forme des équipe à l'extérieur\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant que nos données sont bien centrées réduites, nous pouvons essayer de reconstruire nos modèles.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "X = pd.DataFrame(scaler.transform(X))\n",
    "\n",
    "a = [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25]\n",
    "v = [np.array(moyenne_score(LogisticRegression(), k, 3)) for k in a] # Ici on ne fait une moyenne que sur 3 échantillons car notre programme \n",
    "#met déjà environ 1 minute à s'éxecuter.\n",
    "u = [np.array(moyenne_score(RandomForestClassifier(), k, 3)) for k in a]\n",
    "plt.figure()\n",
    "plt.title('Evolution de la precision moyenne en validation croisée pour k-fold CV, sur un échantillon test centré réduit')\n",
    "plt.plot(a, v, '-b', label='Regression Logistique')\n",
    "plt.plot(a, u, '-r', label='Random Forest')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Moyenne pour 3 k-fold CV')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les résultats observés sont relativement similaires aux premiers : il ne semble donc pas que le preprocessing ait joué sur les performances de nos modèles."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### c) Jouer sur les hyperparamètres de nos algorithmes\n",
    "\n",
    "Pour finir cette partie d'optimisation, nous pouvons essayer de jouer sur les hyperparamètres de nos modèles afin d'obtenir le meilleur modèle possible. Une fois de plus, notre métrique d'évaluation sera la precision moyenne, car c'est ce qui est le plus important quand on fait des paris sportifs.\n",
    "\n",
    "Essayons tout d'abord d'utiliser des Arbres de décision. Le module AdaBoost nous permet de donner différentes profondeurs à nos arbres : plus l'arbre est profond, plus notre modèle fit aux données, et donc mieux il prédit celles de l'échantillon test. Cependant, le risque d'overfitting est alors assez important.\n",
    "\n",
    "Ici, nous n'appliquons ce modèle qu'à nos X_train afin de pouvoir regarder les métriques d'évaluation de notre modèle sur l'échantillon test, échantillon dont il sera resté indépendant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "id": "m0jCleaLCmKr"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "perf = []\n",
    "for i in range(1,20):\n",
    "    clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=i))\n",
    "    perf.append(cross_val_score(clf, X_train_scaled, Y_train, cv=2, scoring='precision_weighted').mean())\n",
    "plt.figure()\n",
    "plt.plot(np.arange(1, 20), perf)\n",
    "plt.xlabel('Profondeur des arbres')\n",
    "plt.ylabel('Crossval score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque ici que dans le cas d'un arbre de décision, on a plutôt intérêt à ce que sa profondeur soit la plus petite possible. Regardons les métriques d'évaluation pour une profondeur égale à 1 :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.43      0.40      0.41       111\n",
      "           1       0.39      0.12      0.18       125\n",
      "           3       0.50      0.75      0.60       187\n",
      "\n",
      "    accuracy                           0.47       423\n",
      "   macro avg       0.44      0.42      0.40       423\n",
      "weighted avg       0.45      0.47      0.43       423\n",
      "\n"
     ]
    }
   ],
   "source": [
    "clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1))\n",
    "clf.fit(X_train, Y_train)\n",
    "Y_pred_clf = clf.predict(X_test)\n",
    "print(classification_report(Y_test, Y_pred_clf))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous arrivons à encore plus augmenter notre précision sur les matchs nuls, et nous obtenons une precision moyenne (weighted) de 0.45, ce qui est une grande amélioration par rapport à tous nos précédents modèles. Nous pourrons donc tester ce modèle et voir si nous obtenons de meilleurs résultats.\n",
    "\n",
    "Essayons tout de même d'aller encore plus loin : AdaBoost permet en réalité de jouer sur de très nombreux paramètres des modèles de classification. Essayons de faire varier tous ces paramètres pour tester différents modèle et sélectionner le meilleur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 810,
   "metadata": {
    "id": "M3H9z0zLAcEY"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'SAMME.R',\n",
       " 'base_estimator': None,\n",
       " 'learning_rate': 1.0,\n",
       " 'n_estimators': 50,\n",
       " 'random_state': None}"
      ]
     },
     "execution_count": 810,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AdaBoostClassifier().get_params()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ici, nous avons la liste des paramètres sur lesquels nous pouvons jouer. Définissons une grille d'hyperparamètres qui va nous permettre de les faire varier pour tous nos modèles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 815,
   "metadata": {
    "id": "AL3wdK9nEERl"
   },
   "outputs": [],
   "source": [
    "param_grid = {'base_estimator': [DecisionTreeClassifier(), RandomForestClassifier(), LogisticRegression()],\n",
    "             'learning_rate': [0.001, 0.01, 0.1, 1.0],\n",
    "             'n_estimators': [50, 100, 150, 200],\n",
    "             'random_state':[7]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ATTENTION : Le modèle suivant est extrêmement long à entraîner. Le programme met une environ une heure à tourner.\n",
    "La partie 4 reste fonctionnelle même si on n'exécute pas les lignes qui suivent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 817,
   "metadata": {
    "id": "KkOF5_XMEP5R"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=AdaBoostClassifier(),\n",
       "             param_grid={'base_estimator': [DecisionTreeClassifier(),\n",
       "                                            RandomForestClassifier(),\n",
       "                                            LogisticRegression()],\n",
       "                         'learning_rate': [0.001, 0.01, 0.1, 1.0],\n",
       "                         'n_estimators': [50, 100, 150, 200],\n",
       "                         'random_state': [7]},\n",
       "             scoring='precision_weighted')"
      ]
     },
     "execution_count": 817,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "rg = GridSearchCV(AdaBoostClassifier(), param_grid=param_grid, scoring='precision_weighted')\n",
    "rg.fit(X_train_scaled, Y_train) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenat que GridSearch a trouvé les meilleurs hyperparamètres, nous pouvons découvrir le classement des différents modèles :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {
    "id": "fltZdKLAGIIK"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_base_estimator</th>\n",
       "      <th>param_learning_rate</th>\n",
       "      <th>param_n_estimators</th>\n",
       "      <th>param_random_state</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>53.538628</td>\n",
       "      <td>86.139347</td>\n",
       "      <td>0.502973</td>\n",
       "      <td>0.030002</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.471646</td>\n",
       "      <td>0.437518</td>\n",
       "      <td>0.468074</td>\n",
       "      <td>0.434715</td>\n",
       "      <td>0.435365</td>\n",
       "      <td>0.449464</td>\n",
       "      <td>0.016718</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21.942267</td>\n",
       "      <td>3.237039</td>\n",
       "      <td>1.145627</td>\n",
       "      <td>0.224154</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.468004</td>\n",
       "      <td>0.437518</td>\n",
       "      <td>0.461948</td>\n",
       "      <td>0.430142</td>\n",
       "      <td>0.431072</td>\n",
       "      <td>0.445737</td>\n",
       "      <td>0.016028</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>14.556133</td>\n",
       "      <td>0.327041</td>\n",
       "      <td>0.705169</td>\n",
       "      <td>0.014218</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.441789</td>\n",
       "      <td>0.427437</td>\n",
       "      <td>0.439329</td>\n",
       "      <td>0.445279</td>\n",
       "      <td>0.464690</td>\n",
       "      <td>0.443705</td>\n",
       "      <td>0.012086</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>38.832327</td>\n",
       "      <td>1.461288</td>\n",
       "      <td>2.030987</td>\n",
       "      <td>0.294261</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.469056</td>\n",
       "      <td>0.438266</td>\n",
       "      <td>0.452420</td>\n",
       "      <td>0.421393</td>\n",
       "      <td>0.431072</td>\n",
       "      <td>0.442442</td>\n",
       "      <td>0.016719</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>43.317962</td>\n",
       "      <td>1.357694</td>\n",
       "      <td>2.034101</td>\n",
       "      <td>0.105965</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.439060</td>\n",
       "      <td>0.421487</td>\n",
       "      <td>0.441459</td>\n",
       "      <td>0.427189</td>\n",
       "      <td>0.476612</td>\n",
       "      <td>0.441161</td>\n",
       "      <td>0.019202</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>60.862454</td>\n",
       "      <td>2.331810</td>\n",
       "      <td>3.174890</td>\n",
       "      <td>0.408366</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.434218</td>\n",
       "      <td>0.423196</td>\n",
       "      <td>0.435362</td>\n",
       "      <td>0.431792</td>\n",
       "      <td>0.475876</td>\n",
       "      <td>0.440089</td>\n",
       "      <td>0.018394</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>41.935588</td>\n",
       "      <td>0.460328</td>\n",
       "      <td>2.042211</td>\n",
       "      <td>0.031331</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.459345</td>\n",
       "      <td>0.429734</td>\n",
       "      <td>0.429763</td>\n",
       "      <td>0.432646</td>\n",
       "      <td>0.446896</td>\n",
       "      <td>0.439677</td>\n",
       "      <td>0.011709</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>21.323945</td>\n",
       "      <td>0.096112</td>\n",
       "      <td>1.045166</td>\n",
       "      <td>0.028598</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.459345</td>\n",
       "      <td>0.425966</td>\n",
       "      <td>0.429763</td>\n",
       "      <td>0.438263</td>\n",
       "      <td>0.442756</td>\n",
       "      <td>0.439219</td>\n",
       "      <td>0.011692</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>10.233285</td>\n",
       "      <td>0.085111</td>\n",
       "      <td>0.497412</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.466592</td>\n",
       "      <td>0.425966</td>\n",
       "      <td>0.436883</td>\n",
       "      <td>0.438457</td>\n",
       "      <td>0.427193</td>\n",
       "      <td>0.439018</td>\n",
       "      <td>0.014665</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>16.586365</td>\n",
       "      <td>0.968152</td>\n",
       "      <td>0.830224</td>\n",
       "      <td>0.101270</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.441194</td>\n",
       "      <td>0.429689</td>\n",
       "      <td>0.446848</td>\n",
       "      <td>0.409819</td>\n",
       "      <td>0.465770</td>\n",
       "      <td>0.438664</td>\n",
       "      <td>0.018551</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>30.253967</td>\n",
       "      <td>1.108840</td>\n",
       "      <td>1.417299</td>\n",
       "      <td>0.042555</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.431158</td>\n",
       "      <td>0.421487</td>\n",
       "      <td>0.447512</td>\n",
       "      <td>0.427189</td>\n",
       "      <td>0.463706</td>\n",
       "      <td>0.438210</td>\n",
       "      <td>0.015411</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>32.311434</td>\n",
       "      <td>1.187296</td>\n",
       "      <td>1.540452</td>\n",
       "      <td>0.026009</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.459345</td>\n",
       "      <td>0.425373</td>\n",
       "      <td>0.433704</td>\n",
       "      <td>0.430055</td>\n",
       "      <td>0.439196</td>\n",
       "      <td>0.437535</td>\n",
       "      <td>0.011807</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>0.823909</td>\n",
       "      <td>0.024861</td>\n",
       "      <td>0.043240</td>\n",
       "      <td>0.001473</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.359295</td>\n",
       "      <td>0.380388</td>\n",
       "      <td>0.434838</td>\n",
       "      <td>0.622057</td>\n",
       "      <td>0.388059</td>\n",
       "      <td>0.436928</td>\n",
       "      <td>0.095801</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0.430823</td>\n",
       "      <td>0.007003</td>\n",
       "      <td>0.024411</td>\n",
       "      <td>0.001342</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.359295</td>\n",
       "      <td>0.380388</td>\n",
       "      <td>0.434838</td>\n",
       "      <td>0.622057</td>\n",
       "      <td>0.388059</td>\n",
       "      <td>0.436928</td>\n",
       "      <td>0.095801</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>0.639282</td>\n",
       "      <td>0.037334</td>\n",
       "      <td>0.037281</td>\n",
       "      <td>0.003046</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.359295</td>\n",
       "      <td>0.380388</td>\n",
       "      <td>0.434838</td>\n",
       "      <td>0.622057</td>\n",
       "      <td>0.388059</td>\n",
       "      <td>0.436928</td>\n",
       "      <td>0.095801</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>0.245657</td>\n",
       "      <td>0.006786</td>\n",
       "      <td>0.014242</td>\n",
       "      <td>0.000640</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.358719</td>\n",
       "      <td>0.380388</td>\n",
       "      <td>0.434838</td>\n",
       "      <td>0.622057</td>\n",
       "      <td>0.388059</td>\n",
       "      <td>0.436812</td>\n",
       "      <td>0.095894</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>70.823963</td>\n",
       "      <td>8.365259</td>\n",
       "      <td>3.611222</td>\n",
       "      <td>0.586715</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.445844</td>\n",
       "      <td>0.437565</td>\n",
       "      <td>0.446323</td>\n",
       "      <td>0.421393</td>\n",
       "      <td>0.431072</td>\n",
       "      <td>0.436440</td>\n",
       "      <td>0.009408</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>28.472589</td>\n",
       "      <td>0.770241</td>\n",
       "      <td>1.398803</td>\n",
       "      <td>0.091109</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.433325</td>\n",
       "      <td>0.431599</td>\n",
       "      <td>0.423416</td>\n",
       "      <td>0.449374</td>\n",
       "      <td>0.442745</td>\n",
       "      <td>0.436092</td>\n",
       "      <td>0.009046</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>42.970107</td>\n",
       "      <td>1.432293</td>\n",
       "      <td>2.220671</td>\n",
       "      <td>0.186434</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.419310</td>\n",
       "      <td>0.419034</td>\n",
       "      <td>0.416922</td>\n",
       "      <td>0.434234</td>\n",
       "      <td>0.454587</td>\n",
       "      <td>0.428817</td>\n",
       "      <td>0.014290</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>62.669413</td>\n",
       "      <td>3.680832</td>\n",
       "      <td>3.610418</td>\n",
       "      <td>1.075453</td>\n",
       "      <td>RandomForestClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': RandomForestClassifier(), '...</td>\n",
       "      <td>0.419344</td>\n",
       "      <td>0.419034</td>\n",
       "      <td>0.419506</td>\n",
       "      <td>0.424232</td>\n",
       "      <td>0.450167</td>\n",
       "      <td>0.426457</td>\n",
       "      <td>0.012009</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.351389</td>\n",
       "      <td>0.024189</td>\n",
       "      <td>0.016868</td>\n",
       "      <td>0.000324</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.414680</td>\n",
       "      <td>0.379753</td>\n",
       "      <td>0.426954</td>\n",
       "      <td>0.393309</td>\n",
       "      <td>0.426853</td>\n",
       "      <td>0.408310</td>\n",
       "      <td>0.018828</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.740404</td>\n",
       "      <td>0.077316</td>\n",
       "      <td>0.029646</td>\n",
       "      <td>0.001353</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.401587</td>\n",
       "      <td>0.385208</td>\n",
       "      <td>0.405877</td>\n",
       "      <td>0.417784</td>\n",
       "      <td>0.426572</td>\n",
       "      <td>0.407405</td>\n",
       "      <td>0.014170</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1.226820</td>\n",
       "      <td>0.047458</td>\n",
       "      <td>0.048468</td>\n",
       "      <td>0.015504</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.357852</td>\n",
       "      <td>0.427685</td>\n",
       "      <td>0.448165</td>\n",
       "      <td>0.323262</td>\n",
       "      <td>0.463544</td>\n",
       "      <td>0.404102</td>\n",
       "      <td>0.054231</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.174029</td>\n",
       "      <td>0.017552</td>\n",
       "      <td>0.008950</td>\n",
       "      <td>0.000644</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.391997</td>\n",
       "      <td>0.384428</td>\n",
       "      <td>0.437827</td>\n",
       "      <td>0.396901</td>\n",
       "      <td>0.406114</td>\n",
       "      <td>0.403453</td>\n",
       "      <td>0.018573</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.549258</td>\n",
       "      <td>0.045990</td>\n",
       "      <td>0.024294</td>\n",
       "      <td>0.000786</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.395430</td>\n",
       "      <td>0.372412</td>\n",
       "      <td>0.419156</td>\n",
       "      <td>0.394399</td>\n",
       "      <td>0.433812</td>\n",
       "      <td>0.403042</td>\n",
       "      <td>0.021341</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.525454</td>\n",
       "      <td>0.010378</td>\n",
       "      <td>0.024478</td>\n",
       "      <td>0.001270</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.368690</td>\n",
       "      <td>0.442762</td>\n",
       "      <td>0.369426</td>\n",
       "      <td>0.396311</td>\n",
       "      <td>0.429824</td>\n",
       "      <td>0.401403</td>\n",
       "      <td>0.030453</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1.041052</td>\n",
       "      <td>0.063305</td>\n",
       "      <td>0.031644</td>\n",
       "      <td>0.005495</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.302131</td>\n",
       "      <td>0.436870</td>\n",
       "      <td>0.505495</td>\n",
       "      <td>0.298546</td>\n",
       "      <td>0.453617</td>\n",
       "      <td>0.399332</td>\n",
       "      <td>0.083943</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0.531349</td>\n",
       "      <td>0.049395</td>\n",
       "      <td>0.022553</td>\n",
       "      <td>0.010157</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.302131</td>\n",
       "      <td>0.436870</td>\n",
       "      <td>0.505495</td>\n",
       "      <td>0.298546</td>\n",
       "      <td>0.453617</td>\n",
       "      <td>0.399332</td>\n",
       "      <td>0.083943</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.719629</td>\n",
       "      <td>0.045641</td>\n",
       "      <td>0.030172</td>\n",
       "      <td>0.001816</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.385630</td>\n",
       "      <td>0.369507</td>\n",
       "      <td>0.391932</td>\n",
       "      <td>0.397769</td>\n",
       "      <td>0.439352</td>\n",
       "      <td>0.396838</td>\n",
       "      <td>0.023259</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.760448</td>\n",
       "      <td>0.359537</td>\n",
       "      <td>0.054311</td>\n",
       "      <td>0.008234</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.355401</td>\n",
       "      <td>0.391780</td>\n",
       "      <td>0.444127</td>\n",
       "      <td>0.361061</td>\n",
       "      <td>0.430537</td>\n",
       "      <td>0.396581</td>\n",
       "      <td>0.035761</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.331084</td>\n",
       "      <td>0.008949</td>\n",
       "      <td>0.016678</td>\n",
       "      <td>0.000919</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.369143</td>\n",
       "      <td>0.443897</td>\n",
       "      <td>0.370065</td>\n",
       "      <td>0.398448</td>\n",
       "      <td>0.400552</td>\n",
       "      <td>0.396421</td>\n",
       "      <td>0.027254</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.623748</td>\n",
       "      <td>0.009676</td>\n",
       "      <td>0.027326</td>\n",
       "      <td>0.000879</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.373817</td>\n",
       "      <td>0.398552</td>\n",
       "      <td>0.378487</td>\n",
       "      <td>0.395049</td>\n",
       "      <td>0.427984</td>\n",
       "      <td>0.394778</td>\n",
       "      <td>0.019088</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.315736</td>\n",
       "      <td>0.012894</td>\n",
       "      <td>0.015615</td>\n",
       "      <td>0.000614</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.362206</td>\n",
       "      <td>0.378796</td>\n",
       "      <td>0.341345</td>\n",
       "      <td>0.426124</td>\n",
       "      <td>0.447522</td>\n",
       "      <td>0.391199</td>\n",
       "      <td>0.039678</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1.418089</td>\n",
       "      <td>0.118926</td>\n",
       "      <td>0.036687</td>\n",
       "      <td>0.002355</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.302131</td>\n",
       "      <td>0.396177</td>\n",
       "      <td>0.505495</td>\n",
       "      <td>0.298546</td>\n",
       "      <td>0.453617</td>\n",
       "      <td>0.391193</td>\n",
       "      <td>0.081856</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1.858184</td>\n",
       "      <td>0.228172</td>\n",
       "      <td>0.056473</td>\n",
       "      <td>0.011998</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.337425</td>\n",
       "      <td>0.408629</td>\n",
       "      <td>0.438184</td>\n",
       "      <td>0.338727</td>\n",
       "      <td>0.430168</td>\n",
       "      <td>0.390627</td>\n",
       "      <td>0.043985</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>0.728892</td>\n",
       "      <td>0.039382</td>\n",
       "      <td>0.028083</td>\n",
       "      <td>0.002051</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.298169</td>\n",
       "      <td>0.415987</td>\n",
       "      <td>0.449556</td>\n",
       "      <td>0.322145</td>\n",
       "      <td>0.464277</td>\n",
       "      <td>0.390027</td>\n",
       "      <td>0.067493</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.506699</td>\n",
       "      <td>0.042032</td>\n",
       "      <td>0.022961</td>\n",
       "      <td>0.000545</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.384968</td>\n",
       "      <td>0.368019</td>\n",
       "      <td>0.349850</td>\n",
       "      <td>0.422299</td>\n",
       "      <td>0.423180</td>\n",
       "      <td>0.389663</td>\n",
       "      <td>0.029203</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2.292477</td>\n",
       "      <td>0.328104</td>\n",
       "      <td>0.064340</td>\n",
       "      <td>0.013592</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.290723</td>\n",
       "      <td>0.396177</td>\n",
       "      <td>0.505495</td>\n",
       "      <td>0.298546</td>\n",
       "      <td>0.453617</td>\n",
       "      <td>0.388911</td>\n",
       "      <td>0.084425</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>0.353131</td>\n",
       "      <td>0.010928</td>\n",
       "      <td>0.014967</td>\n",
       "      <td>0.000411</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.363505</td>\n",
       "      <td>0.369624</td>\n",
       "      <td>0.446579</td>\n",
       "      <td>0.367817</td>\n",
       "      <td>0.393774</td>\n",
       "      <td>0.388260</td>\n",
       "      <td>0.031015</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>1.264385</td>\n",
       "      <td>0.065050</td>\n",
       "      <td>0.047423</td>\n",
       "      <td>0.005111</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.361936</td>\n",
       "      <td>0.368573</td>\n",
       "      <td>0.437789</td>\n",
       "      <td>0.375641</td>\n",
       "      <td>0.386480</td>\n",
       "      <td>0.386084</td>\n",
       "      <td>0.027101</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1.032655</td>\n",
       "      <td>0.064293</td>\n",
       "      <td>0.037467</td>\n",
       "      <td>0.001120</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.358250</td>\n",
       "      <td>0.363985</td>\n",
       "      <td>0.439016</td>\n",
       "      <td>0.376756</td>\n",
       "      <td>0.391704</td>\n",
       "      <td>0.385942</td>\n",
       "      <td>0.028925</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.158369</td>\n",
       "      <td>0.004050</td>\n",
       "      <td>0.009243</td>\n",
       "      <td>0.000794</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.372066</td>\n",
       "      <td>0.391945</td>\n",
       "      <td>0.381634</td>\n",
       "      <td>0.370067</td>\n",
       "      <td>0.412305</td>\n",
       "      <td>0.385603</td>\n",
       "      <td>0.015451</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.175763</td>\n",
       "      <td>0.009304</td>\n",
       "      <td>0.009862</td>\n",
       "      <td>0.001244</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.001</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.385179</td>\n",
       "      <td>0.404843</td>\n",
       "      <td>0.349739</td>\n",
       "      <td>0.382629</td>\n",
       "      <td>0.402927</td>\n",
       "      <td>0.385064</td>\n",
       "      <td>0.019820</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0.764072</td>\n",
       "      <td>0.086821</td>\n",
       "      <td>0.028927</td>\n",
       "      <td>0.003304</td>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': LogisticRegression(), 'lear...</td>\n",
       "      <td>0.365686</td>\n",
       "      <td>0.363985</td>\n",
       "      <td>0.427071</td>\n",
       "      <td>0.370842</td>\n",
       "      <td>0.389837</td>\n",
       "      <td>0.383484</td>\n",
       "      <td>0.023652</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.155308</td>\n",
       "      <td>0.004540</td>\n",
       "      <td>0.009014</td>\n",
       "      <td>0.000667</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.372764</td>\n",
       "      <td>0.371558</td>\n",
       "      <td>0.350534</td>\n",
       "      <td>0.403372</td>\n",
       "      <td>0.410937</td>\n",
       "      <td>0.381833</td>\n",
       "      <td>0.022264</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.635531</td>\n",
       "      <td>0.007494</td>\n",
       "      <td>0.028594</td>\n",
       "      <td>0.001242</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.360063</td>\n",
       "      <td>0.357103</td>\n",
       "      <td>0.371827</td>\n",
       "      <td>0.390602</td>\n",
       "      <td>0.413079</td>\n",
       "      <td>0.378535</td>\n",
       "      <td>0.020902</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.311281</td>\n",
       "      <td>0.006236</td>\n",
       "      <td>0.015317</td>\n",
       "      <td>0.000615</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.371254</td>\n",
       "      <td>0.367857</td>\n",
       "      <td>0.349445</td>\n",
       "      <td>0.395298</td>\n",
       "      <td>0.403881</td>\n",
       "      <td>0.377547</td>\n",
       "      <td>0.019656</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.473816</td>\n",
       "      <td>0.010103</td>\n",
       "      <td>0.022527</td>\n",
       "      <td>0.001145</td>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>7</td>\n",
       "      <td>{'base_estimator': DecisionTreeClassifier(), '...</td>\n",
       "      <td>0.364404</td>\n",
       "      <td>0.353357</td>\n",
       "      <td>0.358759</td>\n",
       "      <td>0.392830</td>\n",
       "      <td>0.412582</td>\n",
       "      <td>0.376386</td>\n",
       "      <td>0.022650</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "20      53.538628     86.139347         0.502973        0.030002   \n",
       "21      21.942267      3.237039         1.145627        0.224154   \n",
       "28      14.556133      0.327041         0.705169        0.014218   \n",
       "22      38.832327      1.461288         2.030987        0.294261   \n",
       "26      43.317962      1.357694         2.034101        0.105965   \n",
       "27      60.862454      2.331810         3.174890        0.408366   \n",
       "19      41.935588      0.460328         2.042211        0.031331   \n",
       "17      21.323945      0.096112         1.045166        0.028598   \n",
       "16      10.233285      0.085111         0.497412        0.002541   \n",
       "24      16.586365      0.968152         0.830224        0.101270   \n",
       "25      30.253967      1.108840         1.417299        0.042555   \n",
       "18      32.311434      1.187296         1.540452        0.026009   \n",
       "47       0.823909      0.024861         0.043240        0.001473   \n",
       "45       0.430823      0.007003         0.024411        0.001342   \n",
       "46       0.639282      0.037334         0.037281        0.003046   \n",
       "44       0.245657      0.006786         0.014242        0.000640   \n",
       "23      70.823963      8.365259         3.611222        0.586715   \n",
       "29      28.472589      0.770241         1.398803        0.091109   \n",
       "30      42.970107      1.432293         2.220671        0.186434   \n",
       "31      62.669413      3.680832         3.610418        1.075453   \n",
       "13       0.351389      0.024189         0.016868        0.000324   \n",
       "11       0.740404      0.077316         0.029646        0.001353   \n",
       "37       1.226820      0.047458         0.048468        0.015504   \n",
       "12       0.174029      0.017552         0.008950        0.000644   \n",
       "14       0.549258      0.045990         0.024294        0.000786   \n",
       "2        0.525454      0.010378         0.024478        0.001270   \n",
       "33       1.041052      0.063305         0.031644        0.005495   \n",
       "32       0.531349      0.049395         0.022553        0.010157   \n",
       "15       0.719629      0.045641         0.030172        0.001816   \n",
       "39       1.760448      0.359537         0.054311        0.008234   \n",
       "1        0.331084      0.008949         0.016678        0.000919   \n",
       "3        0.623748      0.009676         0.027326        0.000879   \n",
       "9        0.315736      0.012894         0.015615        0.000614   \n",
       "34       1.418089      0.118926         0.036687        0.002355   \n",
       "38       1.858184      0.228172         0.056473        0.011998   \n",
       "36       0.728892      0.039382         0.028083        0.002051   \n",
       "10       0.506699      0.042032         0.022961        0.000545   \n",
       "35       2.292477      0.328104         0.064340        0.013592   \n",
       "40       0.353131      0.010928         0.014967        0.000411   \n",
       "43       1.264385      0.065050         0.047423        0.005111   \n",
       "42       1.032655      0.064293         0.037467        0.001120   \n",
       "4        0.158369      0.004050         0.009243        0.000794   \n",
       "0        0.175763      0.009304         0.009862        0.001244   \n",
       "41       0.764072      0.086821         0.028927        0.003304   \n",
       "8        0.155308      0.004540         0.009014        0.000667   \n",
       "7        0.635531      0.007494         0.028594        0.001242   \n",
       "5        0.311281      0.006236         0.015317        0.000615   \n",
       "6        0.473816      0.010103         0.022527        0.001145   \n",
       "\n",
       "        param_base_estimator param_learning_rate param_n_estimators  \\\n",
       "20  RandomForestClassifier()                0.01                 50   \n",
       "21  RandomForestClassifier()                0.01                100   \n",
       "28  RandomForestClassifier()                   1                 50   \n",
       "22  RandomForestClassifier()                0.01                150   \n",
       "26  RandomForestClassifier()                 0.1                150   \n",
       "27  RandomForestClassifier()                 0.1                200   \n",
       "19  RandomForestClassifier()               0.001                200   \n",
       "17  RandomForestClassifier()               0.001                100   \n",
       "16  RandomForestClassifier()               0.001                 50   \n",
       "24  RandomForestClassifier()                 0.1                 50   \n",
       "25  RandomForestClassifier()                 0.1                100   \n",
       "18  RandomForestClassifier()               0.001                150   \n",
       "47      LogisticRegression()                   1                200   \n",
       "45      LogisticRegression()                   1                100   \n",
       "46      LogisticRegression()                   1                150   \n",
       "44      LogisticRegression()                   1                 50   \n",
       "23  RandomForestClassifier()                0.01                200   \n",
       "29  RandomForestClassifier()                   1                100   \n",
       "30  RandomForestClassifier()                   1                150   \n",
       "31  RandomForestClassifier()                   1                200   \n",
       "13  DecisionTreeClassifier()                   1                100   \n",
       "11  DecisionTreeClassifier()                 0.1                200   \n",
       "37      LogisticRegression()                0.01                100   \n",
       "12  DecisionTreeClassifier()                   1                 50   \n",
       "14  DecisionTreeClassifier()                   1                150   \n",
       "2   DecisionTreeClassifier()               0.001                150   \n",
       "33      LogisticRegression()               0.001                100   \n",
       "32      LogisticRegression()               0.001                 50   \n",
       "15  DecisionTreeClassifier()                   1                200   \n",
       "39      LogisticRegression()                0.01                200   \n",
       "1   DecisionTreeClassifier()               0.001                100   \n",
       "3   DecisionTreeClassifier()               0.001                200   \n",
       "9   DecisionTreeClassifier()                 0.1                100   \n",
       "34      LogisticRegression()               0.001                150   \n",
       "38      LogisticRegression()                0.01                150   \n",
       "36      LogisticRegression()                0.01                 50   \n",
       "10  DecisionTreeClassifier()                 0.1                150   \n",
       "35      LogisticRegression()               0.001                200   \n",
       "40      LogisticRegression()                 0.1                 50   \n",
       "43      LogisticRegression()                 0.1                200   \n",
       "42      LogisticRegression()                 0.1                150   \n",
       "4   DecisionTreeClassifier()                0.01                 50   \n",
       "0   DecisionTreeClassifier()               0.001                 50   \n",
       "41      LogisticRegression()                 0.1                100   \n",
       "8   DecisionTreeClassifier()                 0.1                 50   \n",
       "7   DecisionTreeClassifier()                0.01                200   \n",
       "5   DecisionTreeClassifier()                0.01                100   \n",
       "6   DecisionTreeClassifier()                0.01                150   \n",
       "\n",
       "   param_random_state                                             params  \\\n",
       "20                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "21                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "28                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "22                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "26                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "27                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "19                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "17                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "16                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "24                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "25                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "18                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "47                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "45                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "46                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "44                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "23                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "29                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "30                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "31                  7  {'base_estimator': RandomForestClassifier(), '...   \n",
       "13                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "11                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "37                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "12                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "14                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "2                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "33                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "32                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "15                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "39                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "1                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "3                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "9                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "34                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "38                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "36                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "10                  7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "35                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "40                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "43                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "42                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "4                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "0                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "41                  7  {'base_estimator': LogisticRegression(), 'lear...   \n",
       "8                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "7                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "5                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "6                   7  {'base_estimator': DecisionTreeClassifier(), '...   \n",
       "\n",
       "    split0_test_score  split1_test_score  split2_test_score  \\\n",
       "20           0.471646           0.437518           0.468074   \n",
       "21           0.468004           0.437518           0.461948   \n",
       "28           0.441789           0.427437           0.439329   \n",
       "22           0.469056           0.438266           0.452420   \n",
       "26           0.439060           0.421487           0.441459   \n",
       "27           0.434218           0.423196           0.435362   \n",
       "19           0.459345           0.429734           0.429763   \n",
       "17           0.459345           0.425966           0.429763   \n",
       "16           0.466592           0.425966           0.436883   \n",
       "24           0.441194           0.429689           0.446848   \n",
       "25           0.431158           0.421487           0.447512   \n",
       "18           0.459345           0.425373           0.433704   \n",
       "47           0.359295           0.380388           0.434838   \n",
       "45           0.359295           0.380388           0.434838   \n",
       "46           0.359295           0.380388           0.434838   \n",
       "44           0.358719           0.380388           0.434838   \n",
       "23           0.445844           0.437565           0.446323   \n",
       "29           0.433325           0.431599           0.423416   \n",
       "30           0.419310           0.419034           0.416922   \n",
       "31           0.419344           0.419034           0.419506   \n",
       "13           0.414680           0.379753           0.426954   \n",
       "11           0.401587           0.385208           0.405877   \n",
       "37           0.357852           0.427685           0.448165   \n",
       "12           0.391997           0.384428           0.437827   \n",
       "14           0.395430           0.372412           0.419156   \n",
       "2            0.368690           0.442762           0.369426   \n",
       "33           0.302131           0.436870           0.505495   \n",
       "32           0.302131           0.436870           0.505495   \n",
       "15           0.385630           0.369507           0.391932   \n",
       "39           0.355401           0.391780           0.444127   \n",
       "1            0.369143           0.443897           0.370065   \n",
       "3            0.373817           0.398552           0.378487   \n",
       "9            0.362206           0.378796           0.341345   \n",
       "34           0.302131           0.396177           0.505495   \n",
       "38           0.337425           0.408629           0.438184   \n",
       "36           0.298169           0.415987           0.449556   \n",
       "10           0.384968           0.368019           0.349850   \n",
       "35           0.290723           0.396177           0.505495   \n",
       "40           0.363505           0.369624           0.446579   \n",
       "43           0.361936           0.368573           0.437789   \n",
       "42           0.358250           0.363985           0.439016   \n",
       "4            0.372066           0.391945           0.381634   \n",
       "0            0.385179           0.404843           0.349739   \n",
       "41           0.365686           0.363985           0.427071   \n",
       "8            0.372764           0.371558           0.350534   \n",
       "7            0.360063           0.357103           0.371827   \n",
       "5            0.371254           0.367857           0.349445   \n",
       "6            0.364404           0.353357           0.358759   \n",
       "\n",
       "    split3_test_score  split4_test_score  mean_test_score  std_test_score  \\\n",
       "20           0.434715           0.435365         0.449464        0.016718   \n",
       "21           0.430142           0.431072         0.445737        0.016028   \n",
       "28           0.445279           0.464690         0.443705        0.012086   \n",
       "22           0.421393           0.431072         0.442442        0.016719   \n",
       "26           0.427189           0.476612         0.441161        0.019202   \n",
       "27           0.431792           0.475876         0.440089        0.018394   \n",
       "19           0.432646           0.446896         0.439677        0.011709   \n",
       "17           0.438263           0.442756         0.439219        0.011692   \n",
       "16           0.438457           0.427193         0.439018        0.014665   \n",
       "24           0.409819           0.465770         0.438664        0.018551   \n",
       "25           0.427189           0.463706         0.438210        0.015411   \n",
       "18           0.430055           0.439196         0.437535        0.011807   \n",
       "47           0.622057           0.388059         0.436928        0.095801   \n",
       "45           0.622057           0.388059         0.436928        0.095801   \n",
       "46           0.622057           0.388059         0.436928        0.095801   \n",
       "44           0.622057           0.388059         0.436812        0.095894   \n",
       "23           0.421393           0.431072         0.436440        0.009408   \n",
       "29           0.449374           0.442745         0.436092        0.009046   \n",
       "30           0.434234           0.454587         0.428817        0.014290   \n",
       "31           0.424232           0.450167         0.426457        0.012009   \n",
       "13           0.393309           0.426853         0.408310        0.018828   \n",
       "11           0.417784           0.426572         0.407405        0.014170   \n",
       "37           0.323262           0.463544         0.404102        0.054231   \n",
       "12           0.396901           0.406114         0.403453        0.018573   \n",
       "14           0.394399           0.433812         0.403042        0.021341   \n",
       "2            0.396311           0.429824         0.401403        0.030453   \n",
       "33           0.298546           0.453617         0.399332        0.083943   \n",
       "32           0.298546           0.453617         0.399332        0.083943   \n",
       "15           0.397769           0.439352         0.396838        0.023259   \n",
       "39           0.361061           0.430537         0.396581        0.035761   \n",
       "1            0.398448           0.400552         0.396421        0.027254   \n",
       "3            0.395049           0.427984         0.394778        0.019088   \n",
       "9            0.426124           0.447522         0.391199        0.039678   \n",
       "34           0.298546           0.453617         0.391193        0.081856   \n",
       "38           0.338727           0.430168         0.390627        0.043985   \n",
       "36           0.322145           0.464277         0.390027        0.067493   \n",
       "10           0.422299           0.423180         0.389663        0.029203   \n",
       "35           0.298546           0.453617         0.388911        0.084425   \n",
       "40           0.367817           0.393774         0.388260        0.031015   \n",
       "43           0.375641           0.386480         0.386084        0.027101   \n",
       "42           0.376756           0.391704         0.385942        0.028925   \n",
       "4            0.370067           0.412305         0.385603        0.015451   \n",
       "0            0.382629           0.402927         0.385064        0.019820   \n",
       "41           0.370842           0.389837         0.383484        0.023652   \n",
       "8            0.403372           0.410937         0.381833        0.022264   \n",
       "7            0.390602           0.413079         0.378535        0.020902   \n",
       "5            0.395298           0.403881         0.377547        0.019656   \n",
       "6            0.392830           0.412582         0.376386        0.022650   \n",
       "\n",
       "    rank_test_score  \n",
       "20                1  \n",
       "21                2  \n",
       "28                3  \n",
       "22                4  \n",
       "26                5  \n",
       "27                6  \n",
       "19                7  \n",
       "17                8  \n",
       "16                9  \n",
       "24               10  \n",
       "25               11  \n",
       "18               12  \n",
       "47               13  \n",
       "45               13  \n",
       "46               13  \n",
       "44               16  \n",
       "23               17  \n",
       "29               18  \n",
       "30               19  \n",
       "31               20  \n",
       "13               21  \n",
       "11               22  \n",
       "37               23  \n",
       "12               24  \n",
       "14               25  \n",
       "2                26  \n",
       "33               27  \n",
       "32               27  \n",
       "15               29  \n",
       "39               30  \n",
       "1                31  \n",
       "3                32  \n",
       "9                33  \n",
       "34               34  \n",
       "38               35  \n",
       "36               36  \n",
       "10               37  \n",
       "35               38  \n",
       "40               39  \n",
       "43               40  \n",
       "42               41  \n",
       "4                42  \n",
       "0                43  \n",
       "41               44  \n",
       "8                45  \n",
       "7                46  \n",
       "5                47  \n",
       "6                48  "
      ]
     },
     "execution_count": 826,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.DataFrame(rg.cv_results_)\n",
    "results.sort_values('rank_test_score')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "C'est alors le classificateur Random Forest, avec 50 n_estimateurs et un taux d'apprentissage de 0.01 qui est le meilleur de nos modèles. Essayons de regarder les métriques d'évaluation de notre \"hyper\"modèle :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 830,
   "metadata": {
    "id": "Zi4_ZMHeh1E-"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.37      0.17      0.23       111\n",
      "           1       0.42      0.34      0.37       125\n",
      "           3       0.49      0.71      0.58       187\n",
      "\n",
      "    accuracy                           0.46       423\n",
      "   macro avg       0.43      0.40      0.39       423\n",
      "weighted avg       0.44      0.46      0.43       423\n",
      "\n"
     ]
    }
   ],
   "source": [
    "Y_pred = rg.predict(X_test)\n",
    "print(classification_report(Y_test, Y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finalement, les indicateurs restent très bons mais ne sont pas plus élevés que l'arbre de décision : la weighted precision moyenne est égale à 0.44 contre 0.45 pour l'arbre de décision. Essayons de tester ces deux nouveaux modèles sur nos données 2020 pour voir l'impact sur nos bénéfices :"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Stratégies 10 & 11 : Utiliser nos nouveaux modèles, plus performants*\n",
    "\n",
    "On s'attend à ce que les gains générés en incluant les matchs nuls soit plus élevés que précédement, mais ici, la stratégie qui consiste à ne miser que sur les victoires à l'extérieur est moins pertinente, car notre precision sur les victoires à l'extérieur est moins grande que d'habitude.\n",
    "Au niveau des mises, nous misons 1 sur chaque match."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 896,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Mise</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.38</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>1</td>\n",
       "      <td>3.22</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>1</td>\n",
       "      <td>3.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>1</td>\n",
       "      <td>3.32</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>0</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>0</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>0</td>\n",
       "      <td>5.15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result  Mise  Benefice\n",
       "0      Bordeaux      Nantes           0  3.38       1     1     -1.00\n",
       "1         Dijon      Angers           1  3.22       0     1     -1.00\n",
       "2         Lille      Rennes           0  3.60       1     1     -1.00\n",
       "3        Monaco       Reims           1  3.65       1     1      2.65\n",
       "4       Lorient  Strasbourg           1  3.32       3     1     -1.00\n",
       "..          ...         ...         ...   ...     ...   ...       ...\n",
       "133     Lorient       Nimes           0  3.50       3     1     -1.00\n",
       "134      Nantes       Dijon           0  5.00       1     1     -1.00\n",
       "135  Strasbourg        Metz           0  4.09       1     1     -1.00\n",
       "136       Lille    Bordeaux           0  5.75       3     1     -1.00\n",
       "137    Paris SG        Lyon           0  5.15       0     1      4.15\n",
       "\n",
       "[138 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Cote</th>\n",
       "      <th>Result</th>\n",
       "      <th>Mise</th>\n",
       "      <th>Benefice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.38</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Angers</td>\n",
       "      <td>1</td>\n",
       "      <td>3.22</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Rennes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Reims</td>\n",
       "      <td>1</td>\n",
       "      <td>3.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>1</td>\n",
       "      <td>3.32</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>Nimes</td>\n",
       "      <td>0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>Dijon</td>\n",
       "      <td>0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Metz</td>\n",
       "      <td>0</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Lille</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>0</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Lyon</td>\n",
       "      <td>0</td>\n",
       "      <td>5.15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam    AwayTeam  Prediction  Cote  Result  Mise  Benefice\n",
       "0      Bordeaux      Nantes           0  3.38       1     1     -1.00\n",
       "1         Dijon      Angers           1  3.22       0     1     -1.00\n",
       "2         Lille      Rennes           0  3.60       1     1     -1.00\n",
       "3        Monaco       Reims           1  3.65       1     1      2.65\n",
       "4       Lorient  Strasbourg           1  3.32       3     1     -1.00\n",
       "..          ...         ...         ...   ...     ...   ...       ...\n",
       "133     Lorient       Nimes           0  3.50       3     1     -1.00\n",
       "134      Nantes       Dijon           0  5.00       1     1     -1.00\n",
       "135  Strasbourg        Metz           0  4.09       1     1     -1.00\n",
       "136       Lille    Bordeaux           0  5.75       3     1     -1.00\n",
       "137    Paris SG        Lyon           0  5.15       0     1      4.15\n",
       "\n",
       "[138 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2020_strategie_10 = strategie_4(df_2020, model = clf)\n",
    "df_2020_strategie_11 = strategie_4(df_2020, model = rg)\n",
    "\n",
    "display(df_2020_strategie_10[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result','Mise', 'Benefice']],df_2020_strategie_11[['HomeTeam', 'AwayTeam', 'Prediction', 'Cote', 'Result','Mise', 'Benefice']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nos deux modèles semblent renvoyer des résultats relativement proches. Calculons nos gains :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 899,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Arbre de classification : Nombre de matchs: 138 /Benefices : -10.830000000000002 € Hypermodèle GridSearch : Nombre de matchs: 138 /Benefices : -10.830000000000002 €\n"
     ]
    }
   ],
   "source": [
    "print('Arbre de classification :', 'Nombre de matchs:',len(df_2020_strategie_10), \n",
    "      '/Benefices :', sum(df_2020_strategie_10['Benefice']),'€',\n",
    "     'Hypermodèle GridSearch :', 'Nombre de matchs:',len(df_2020_strategie_11),\n",
    "     '/Benefices :', sum(df_2020_strategie_11['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On remarque alors que nos bénéfices sont exactement les mêmes : il y a donc fort à parier que nos deux modèles renvoient des résultats très similaires. Malheureusement, nos résultats sont assez négatifs : nous perdons 10,83 euros...\n",
    "Dernier espoir : nous avons vu que nos modèles ont de bonnes precisions sur les matchs nuls : essayons d'adopter une dernière stratégie, qui consisterait à ne miser que quand notre modèle prédit un match nul. Nous devrions obtenir de bons résultats : les côtes de match nul dépassent régulièrement les 3, or 48% de nos prédictions de matchs nuls sont correctes.\n",
    "\n",
    "### *Stratégie 12 : ne miser que sur des matchs nuls*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 901,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de matchs: 24 /Benefices : -6.23 €\n"
     ]
    }
   ],
   "source": [
    "df_2020_strategie_12 = df_2020_strategie_11[df_2020_strategie_11['Prediction'] == 1]\n",
    "print('Nombre de matchs:',len(df_2020_strategie_12), '/Benefices :', sum(df_2020_strategie_12['Benefice']),'€')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finalement, nous continuons à perdre de l'argent, même si nous limitons les pertes. Ainsi, la seule piste d'amélioration vraiment exploitable était de ne miser que sur des value bets : toutes les autres renvoient des résultats mitigés. Finalement cela était prévisible : les sites de paris sporits utilisent déjà des data scientists et disposent de modèles bien plus élaborés que le notre. Il semble utopique qu'avec nos quelques lignes de code, nous parvenions vraiment à battre ces machines financières bien huilées. \n",
    "\n",
    "La tentative fut très enrichissante mais il faut se rendre à l'évidence : malgré toutes nos optimisations, nous ne pourrons jamais battre les sites de paris sportifs, surtout avec si peu d'indicateurs. Tous nos modèles n'ont été construits que selon 4 features : une bonne piste d'amélioration serait de collecter beaucoup plus de données, de manière diversifiée, afin de pouvoir prédire les matchs de manière plus réaliste. Par exemple, nous pourrions essayer de rajouter le nombre de blessés de chaque équipes, leur cadence offensive et défensive (nombre de buts marqués/encaissés), leur nombre d ejours de repos avant le match (par exemple, des équipes qui jouent la ligue des champions en parallèlle ont souvent des moins bonnes performances en championnat), la longévité de l'équipe, la moyenne d'âge des joueurs, l'historique des affrontement entre les deux équipes...\n",
    "\n",
    "Devoir trouver quels indicateurs sont les plus performants et lesquels nous permettent le mieux d'expliquer les résultats est un problème classique de Data Science et nous oriente vers des notions de Deep Learning. Nous pensons que c'est dans cette voie qu'il faudrait creuser afin de pouvoir perfectionner notre modèle."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Partie 4 : Utilisez nos résultats au quotidien**\n",
    "\n",
    "Cette ultime partie sera une partie de \"présentation\" actualisée de nos résultats qui nous permettra d'obtenir, dès que nous le voudrons, les côtes associées aux matchs de la semaine. Nous utiliserons donc du webscrapping afin de pouvoir obtenir des données \"fraîches\".\n",
    "\n",
    "### A) Proposer des côtes pour n'importe quel match.\n",
    "\n",
    "Dans cette partie, nous allons utiliser notre modèle afin de créer une fonction qui nous renverrait les côtes prédites pour n'importe quel match de Ligue 1 que l'on souhaite. L'intérêt, c'est que les features seraient directement scrapées sur Internet, ce qui nous permet d'uniquement indiquer le nom des équipes que l'on souhaite afin d'avoir un résultat.\n",
    "\n",
    "Attention, il ne faut pas oublier que notre régresseur a été entraîné et testé sur des features légèrement différentes de ce qui s'obtient traditionnellement sur Internet (cf la Partie 1 ou nous créons une continuité entre les différents championnats, notamment pour l'indicateur de forme). Cependant, ces différences jouaient surtout en début de championnat, afin de ne pas repartir à 0 à chaque nouveau championnat. Nous avions ainsi évité d'avoir à chaque fois des données 'inutiles' biaisant notre modèle avec des matchs dont toutes les features seraient 0 à chaque début de championnat. \n",
    "\n",
    "Maintenant que le championnat est bien lancé, l'incidence de ces différences est très infîme. Cette construction particulière de \"PtsHomeTeam\" et des autres features doit être vue comme une sorte d'échauffaudage qui nous a permis d'entraîner notre modèle sur des données réalistes. Mais maintenant, si nous appliquons notre modèle en fonction des features traditionnelles trouvées sur internet, celles-ci se reprochereont énormément de ce que l'on a construit, comme on est au délà de la 13 ème journée, les différences entre les features deviennt alors très infimes. Ce problème n'influe d'ailleurs que sur les points moyens, étant donné que les indicateurs de forme ne prennent en compte que les 5 dernier matchs.\n",
    "\n",
    "Cette souplesse dans l'approche du problème va nous permettre de construire plus facilement nos features actualisées.\n",
    "\n",
    "Nous allons utiliser notre modèle RandomTreeClassifier, car c'est celui qui a obtenu les meilleurs résultats de précision. Cela rend notamment optionnelle l'execution du modèle utilisant GridSearch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [],
   "source": [
    "import bs4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {
    "id": "xxRLXRAFxIh_"
   },
   "outputs": [],
   "source": [
    "url_ligue_1=\"https://www.lequipe.fr/Football/ligue-1/page-classement-equipes/general\"\n",
    "from urllib import request\n",
    "request_text = request.urlopen(url_ligue_1).read()\n",
    "# on se connecte à la page wikipedia et on obtient le code source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {
    "id": "AY4xWXEyx16v"
   },
   "outputs": [],
   "source": [
    "page = bs4.BeautifulSoup(request_text, \"lxml\") #on va utiliser le package BeautifulSoup qui \"comprend\" les balises contenues dans la chaine de caractères renvoyée par la fonction request"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {
    "id": "kRgarAU54qv4"
   },
   "outputs": [],
   "source": [
    "equipes = page.find('table', {'class' : 'table table--teams'}) # on identifie le tableau qu'on veut récupérer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {
    "id": "YcWKLk1T4tqY"
   },
   "outputs": [],
   "source": [
    "table_body = equipes.find('tbody')\n",
    "# on recherche toutes les lignes du tableau avec la balise \"tr\"\n",
    "rows = table_body.find_all('tr') # on obtient une liste où chaque élément est une des lignes du tableau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_-gLOAT3-371",
    "outputId": "52d26768-1847-4a3c-85c4-866fb8cd8fe7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1': ['Lille', '1', '29', '14', '8', '5', '1', '26', '10', '+16', ''],\n",
       " '2': ['Lyon', '1', '29', '14', '8', '5', '1', '25', '11', '+14', ''],\n",
       " '3': ['Paris-SG', '2', '28', '14', '9', '1', '4', '33', '10', '+23', ''],\n",
       " '4': ['Marseille', '', '27', '12', '8', '3', '1', '19', '10', '+9', ''],\n",
       " '5': ['Montpellier', '1', '26', '14', '8', '2', '4', '25', '21', '+4', ''],\n",
       " '6': ['Monaco', '1', '23', '14', '7', '2', '5', '25', '20', '+5', ''],\n",
       " '7': ['Angers', '', '23', '14', '7', '2', '5', '20', '22', '-2', ''],\n",
       " '8': ['Rennes', '1', '22', '14', '6', '4', '4', '20', '18', '+2', ''],\n",
       " '9': ['Lens', '1', '21', '13', '6', '3', '4', '21', '21', '0', ''],\n",
       " '10': ['Brest', '2', '21', '14', '7', '0', '7', '23', '25', '-2', ''],\n",
       " '11': ['Bordeaux', '1', '19', '14', '5', '4', '5', '14', '15', '-1', ''],\n",
       " '12': ['Nice', '1', '18', '13', '5', '3', '5', '16', '16', '0', ''],\n",
       " '13': ['Metz', '', '17', '14', '4', '5', '5', '15', '16', '-1', ''],\n",
       " '14': ['Nantes', '', '14', '14', '3', '5', '6', '15', '23', '-8', ''],\n",
       " '15': ['Saint-Étienne', '', '13', '14', '3', '4', '7', '12', '20', '-8', ''],\n",
       " '16': ['Strasbourg', '2', '11', '14', '3', '2', '9', '20', '26', '-6', ''],\n",
       " '17': ['Lorient', '2', '11', '14', '3', '2', '9', '15', '24', '-9', ''],\n",
       " '18': ['Nîmes', '2', '11', '14', '3', '2', '9', '11', '27', '-16', ''],\n",
       " '19': ['Reims', '2', '10', '14', '2', '4', '8', '17', '24', '-7', ''],\n",
       " '20': ['Dijon', '', '9', '14', '1', '6', '7', '9', '22', '-13', '']}"
      ]
     },
     "execution_count": 498,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dico_points = dict()\n",
    "# on nettoie en ne gardant que le texte\n",
    "for row in rows:\n",
    "    cols = row.find_all('td')\n",
    "    cols = [ele.text.strip() for ele in cols]\n",
    "    if len(cols) > 0 : \n",
    "        dico_points[cols[0]] = cols[1:]\n",
    "dico_points\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "5qOPZJ8KE-VL",
    "outputId": "6875fb1a-b077-460f-ba8b-8adc42e18b28"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lille</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>+16</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>+14</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Paris-SG</td>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>33</td>\n",
       "      <td>10</td>\n",
       "      <td>+23</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Marseille</td>\n",
       "      <td></td>\n",
       "      <td>27</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>10</td>\n",
       "      <td>+9</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>+4</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>+5</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td></td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "      <td>-2</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>18</td>\n",
       "      <td>+2</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lens</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Brest</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>-2</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Nice</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td></td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>16</td>\n",
       "      <td>-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td></td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>-8</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Saint-Étienne</td>\n",
       "      <td></td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>-8</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "      <td>-6</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "      <td>-9</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>27</td>\n",
       "      <td>-16</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Reims</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>17</td>\n",
       "      <td>24</td>\n",
       "      <td>-7</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Dijon</td>\n",
       "      <td></td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "      <td>-13</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  1   2   3  4  5  6   7   8    9 10\n",
       "1           Lille  1  29  14  8  5  1  26  10  +16   \n",
       "2            Lyon  1  29  14  8  5  1  25  11  +14   \n",
       "3        Paris-SG  2  28  14  9  1  4  33  10  +23   \n",
       "4       Marseille     27  12  8  3  1  19  10   +9   \n",
       "5     Montpellier  1  26  14  8  2  4  25  21   +4   \n",
       "6          Monaco  1  23  14  7  2  5  25  20   +5   \n",
       "7          Angers     23  14  7  2  5  20  22   -2   \n",
       "8          Rennes  1  22  14  6  4  4  20  18   +2   \n",
       "9            Lens  1  21  13  6  3  4  21  21    0   \n",
       "10          Brest  2  21  14  7  0  7  23  25   -2   \n",
       "11       Bordeaux  1  19  14  5  4  5  14  15   -1   \n",
       "12           Nice  1  18  13  5  3  5  16  16    0   \n",
       "13           Metz     17  14  4  5  5  15  16   -1   \n",
       "14         Nantes     14  14  3  5  6  15  23   -8   \n",
       "15  Saint-Étienne     13  14  3  4  7  12  20   -8   \n",
       "16     Strasbourg  2  11  14  3  2  9  20  26   -6   \n",
       "17        Lorient  2  11  14  3  2  9  15  24   -9   \n",
       "18          Nîmes  2  11  14  3  2  9  11  27  -16   \n",
       "19          Reims  2  10  14  2  4  8  17  24   -7   \n",
       "20          Dijon      9  14  1  6  7   9  22  -13   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.DataFrame.from_dict(dico_points,orient='index')\n",
    "display(df)\n",
    "# on a tout mis dans un dictionnaire puis on l'a transformé en dataframe (df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "metadata": {
    "id": "S2zFjG8wgm64"
   },
   "outputs": [],
   "source": [
    "df.columns = df.columns.astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 334
    },
    "id": "UdNPHnegwL8i",
    "outputId": "3803925d-6583-497a-a31b-823afcecf0ee"
   },
   "outputs": [],
   "source": [
    "df = df.drop(columns=[\"1\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) # on se débarasse des colonnes dont on a pas besoin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "metadata": {
    "id": "Vnj9boo1YRY2"
   },
   "outputs": [],
   "source": [
    "df = df.rename(columns={'0': 'Equipe', '2': 'Points', '3': 'Matchs joués', '10': 'Form'}) # on renomme nos colonnes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "0azSeE2ihAWr",
    "outputId": "530e52f7-ba92-4b51-d0c6-75e6a4b6373d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Points</th>\n",
       "      <th>Matchs joués</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lille</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Paris-SG</td>\n",
       "      <td>28</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>27</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>26</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lens</td>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Brest</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>19</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Nice</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Saint-Étienne</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Reims</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Equipe Points Matchs joués\n",
       "1           Lille     29           14\n",
       "2            Lyon     29           14\n",
       "3        Paris-SG     28           14\n",
       "4       Marseille     27           12\n",
       "5     Montpellier     26           14\n",
       "6          Monaco     23           14\n",
       "7          Angers     23           14\n",
       "8          Rennes     22           14\n",
       "9            Lens     21           13\n",
       "10          Brest     21           14\n",
       "11       Bordeaux     19           14\n",
       "12           Nice     18           13\n",
       "13           Metz     17           14\n",
       "14         Nantes     14           14\n",
       "15  Saint-Étienne     13           14\n",
       "16     Strasbourg     11           14\n",
       "17        Lorient     11           14\n",
       "18          Nîmes     11           14\n",
       "19          Reims     10           14\n",
       "20          Dijon      9           14"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "raj-f1rQBIi_",
    "outputId": "8dae703a-2e84-41cc-9595-980cf5e0a2d6"
   },
   "outputs": [],
   "source": [
    "df = df.replace(['Paris-SG', 'Saint-Étienne'], ['Paris', 'Saint-Etienne'])\n",
    "\n",
    "# On renomme les équipes pour uniformiser leur noms dans les deux dataframe qu'on va manipuler (futur merge) \n",
    "# Ici on n'a besoin que de changer le nom du PSG et de Saint-Etienne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "metadata": {
    "id": "SCE3AZVVWvKi"
   },
   "outputs": [],
   "source": [
    "df['Points'] = df['Points'].astype(int)\n",
    "df['Matchs joués'] = df['Matchs joués'].astype(int) # cette opération pour s'assurer qu'on a bien le type d'objet que l'on veut dans nos colonnes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "8OGZ-JShWG4a",
    "outputId": "97457b79-62c3-447c-dc4d-0055eb1c477a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Points</th>\n",
       "      <th>Matchs joués</th>\n",
       "      <th>PtsAvg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lille</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>2.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>2.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Paris</td>\n",
       "      <td>28</td>\n",
       "      <td>14</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>27</td>\n",
       "      <td>12</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>26</td>\n",
       "      <td>14</td>\n",
       "      <td>1.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>1.642857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>1.642857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>1.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lens</td>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>1.615385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Brest</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>19</td>\n",
       "      <td>14</td>\n",
       "      <td>1.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Nice</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>1.384615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>1.214286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Saint-Etienne</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>0.928571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Reims</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "      <td>0.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>0.642857</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Equipe  Points  Matchs joués    PtsAvg\n",
       "1           Lille      29            14  2.071429\n",
       "2            Lyon      29            14  2.071429\n",
       "3           Paris      28            14  2.000000\n",
       "4       Marseille      27            12  2.250000\n",
       "5     Montpellier      26            14  1.857143\n",
       "6          Monaco      23            14  1.642857\n",
       "7          Angers      23            14  1.642857\n",
       "8          Rennes      22            14  1.571429\n",
       "9            Lens      21            13  1.615385\n",
       "10          Brest      21            14  1.500000\n",
       "11       Bordeaux      19            14  1.357143\n",
       "12           Nice      18            13  1.384615\n",
       "13           Metz      17            14  1.214286\n",
       "14         Nantes      14            14  1.000000\n",
       "15  Saint-Etienne      13            14  0.928571\n",
       "16     Strasbourg      11            14  0.785714\n",
       "17        Lorient      11            14  0.785714\n",
       "18          Nîmes      11            14  0.785714\n",
       "19          Reims      10            14  0.714286\n",
       "20          Dijon       9            14  0.642857"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['PtsAvg'] = df['Points']/df['Matchs joués']\n",
    "display(df)\n",
    "# On obtient la colonne Moyenne de points par match en divisan le nombre de points (colonne 'Points') par le nombre de match joués jusque là (colonne 'Journées').\n",
    "#En effet, certaines équipes peuvent avoir joué moins de match que d'autres lorsqu'elles se rencontrent, comme Marseilles ici."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vLj0HzTFWEFr"
   },
   "source": [
    "On a donc obtenu un dataframe avec le nombre de points en moyennne par équipe. Notre modèle prend en compte la forme de chacune des équipes, que l'on décrit comme le nombre de points pris par une équipe sur les 5 derniers matchs. Nous allons construire ce deuxième dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "metadata": {
    "id": "7W8Vs8jK3gIh"
   },
   "outputs": [],
   "source": [
    "url_forme=\"http://www.madeinmarseillais.com/saison/2020-2021/ligue-1/classement-forme-3.html\"\n",
    "import urllib\n",
    "from urllib import request\n",
    "request_text = request.urlopen(url_forme).read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {
    "id": "_Rachzs33srw"
   },
   "outputs": [],
   "source": [
    "page = bs4.BeautifulSoup(request_text, \"lxml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "metadata": {
    "id": "2b-Zi2sO3h4E"
   },
   "outputs": [],
   "source": [
    "formes = page.find('table', {'class' : 'table table-striped table-hover classement'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "metadata": {
    "id": "bxtEG-Z13mys"
   },
   "outputs": [],
   "source": [
    "table = formes.find('tbody')\n",
    "rows = table.find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "r1Bt0INt3xvN",
    "outputId": "6b36890c-3c90-4de0-bc95-f97295f1e171"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1.  Lyon': ['18', '6', '6', '0', '0', '14', '3', '+11'],\n",
       " '2.  Marseille': ['18', '6', '6', '0', '0', '12', '3', '+9'],\n",
       " '3.  Monaco': ['12', '6', '4', '0', '2', '14', '7', '+7'],\n",
       " '4.  Brest': ['12', '6', '4', '0', '2', '12', '7', '+5'],\n",
       " '5.  Montpellier': ['12', '6', '4', '0', '2', '11', '12', '-1'],\n",
       " '6.  Lille': ['11', '6', '3', '2', '1', '12', '7', '+5'],\n",
       " '7.  Paris': ['10', '6', '3', '1', '2', '13', '7', '+6'],\n",
       " '8.  Angers': ['10', '6', '3', '1', '2', '10', '6', '+4'],\n",
       " '9.  Bordeaux': ['10', '6', '3', '1', '2', '7', '6', '+1'],\n",
       " '10.  Dijon': ['7', '6', '1', '4', '1', '5', '4', '+1'],\n",
       " '11.  Nice': ['7', '6', '2', '1', '3', '8', '7', '+1'],\n",
       " '12.  Lens': ['7', '6', '2', '1', '3', '7', '11', '-4'],\n",
       " '13.  Rennes': ['7', '6', '2', '1', '3', '4', '8', '-4'],\n",
       " '14.  Metz': ['6', '6', '1', '3', '2', '6', '9', '-3'],\n",
       " '15.  Nantes': ['6', '6', '1', '3', '2', '6', '10', '-4'],\n",
       " '16.  Strasbourg': ['5', '6', '1', '2', '3', '11', '10', '+1'],\n",
       " '17.  Reims': ['5', '6', '1', '2', '3', '7', '11', '-4'],\n",
       " '18.  Lorient': ['4', '6', '1', '1', '4', '3', '9', '-6'],\n",
       " '19.  Saint-Etienne': ['3', '6', '0', '3', '3', '3', '8', '-5'],\n",
       " '20.  Nîmes': ['3', '6', '1', '0', '5', '2', '14', '-12']}"
      ]
     },
     "execution_count": 511,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dico_formes = dict()\n",
    "for row in rows:\n",
    "    cols = row.find_all('td')\n",
    "    cols = [ele.text.strip() for ele in cols]\n",
    "    if len(cols) > 0 : \n",
    "        dico_formes[cols[0]] = cols[1:]\n",
    "dico_formes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "aAdZ5RQ933PV",
    "outputId": "1587696d-a1b5-47ed-a01a-d46b0e28aec0"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.  Lyon</th>\n",
       "      <td>18</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.  Marseille</th>\n",
       "      <td>18</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>+9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.  Monaco</th>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>+7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.  Brest</th>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>+5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.  Montpellier</th>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.  Lille</th>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>+5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.  Paris</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>+6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.  Angers</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>+4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.  Bordeaux</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>+1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.  Dijon</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>+1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.  Nice</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>+1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.  Lens</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.  Rennes</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14.  Metz</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15.  Nantes</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16.  Strasbourg</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>+1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17.  Reims</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18.  Lorient</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>-6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19.  Saint-Etienne</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>-5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20.  Nîmes</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>-12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     0  1  2  3  4   5   6    7\n",
       "1.  Lyon            18  6  6  0  0  14   3  +11\n",
       "2.  Marseille       18  6  6  0  0  12   3   +9\n",
       "3.  Monaco          12  6  4  0  2  14   7   +7\n",
       "4.  Brest           12  6  4  0  2  12   7   +5\n",
       "5.  Montpellier     12  6  4  0  2  11  12   -1\n",
       "6.  Lille           11  6  3  2  1  12   7   +5\n",
       "7.  Paris           10  6  3  1  2  13   7   +6\n",
       "8.  Angers          10  6  3  1  2  10   6   +4\n",
       "9.  Bordeaux        10  6  3  1  2   7   6   +1\n",
       "10.  Dijon           7  6  1  4  1   5   4   +1\n",
       "11.  Nice            7  6  2  1  3   8   7   +1\n",
       "12.  Lens            7  6  2  1  3   7  11   -4\n",
       "13.  Rennes          7  6  2  1  3   4   8   -4\n",
       "14.  Metz            6  6  1  3  2   6   9   -3\n",
       "15.  Nantes          6  6  1  3  2   6  10   -4\n",
       "16.  Strasbourg      5  6  1  2  3  11  10   +1\n",
       "17.  Reims           5  6  1  2  3   7  11   -4\n",
       "18.  Lorient         4  6  1  1  4   3   9   -6\n",
       "19.  Saint-Etienne   3  6  0  3  3   3   8   -5\n",
       "20.  Nîmes           3  6  1  0  5   2  14  -12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2 = pd.DataFrame.from_dict(dico_formes,orient='index')\n",
    "display(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {
    "id": "K8Xm9nag4QG5"
   },
   "outputs": [],
   "source": [
    "df2.columns = df2.columns.astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {
    "id": "tju8l9-r6OHJ"
   },
   "outputs": [],
   "source": [
    "df2 = df2.drop(columns=[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) # on se débarasse des colonnes inutiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {
    "id": "rA3HZ0JF6UZN"
   },
   "outputs": [],
   "source": [
    "df2 = df2.rename(columns={'0': 'Forme'}) # on renomme notre colonne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "Y254Vd_A62_Z",
    "outputId": "e02ad032-36cc-4220-a04d-81eeec7226f0"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.  Lyon</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.  Marseille</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.  Monaco</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.  Brest</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.  Montpellier</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.  Lille</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.  Paris</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.  Angers</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.  Bordeaux</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.  Dijon</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.  Nice</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.  Lens</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.  Rennes</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14.  Metz</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15.  Nantes</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16.  Strasbourg</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17.  Reims</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18.  Lorient</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19.  Saint-Etienne</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20.  Nîmes</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Forme\n",
       "1.  Lyon              18\n",
       "2.  Marseille         18\n",
       "3.  Monaco            12\n",
       "4.  Brest             12\n",
       "5.  Montpellier       12\n",
       "6.  Lille             11\n",
       "7.  Paris             10\n",
       "8.  Angers            10\n",
       "9.  Bordeaux          10\n",
       "10.  Dijon             7\n",
       "11.  Nice              7\n",
       "12.  Lens              7\n",
       "13.  Rennes            7\n",
       "14.  Metz              6\n",
       "15.  Nantes            6\n",
       "16.  Strasbourg        5\n",
       "17.  Reims             5\n",
       "18.  Lorient           4\n",
       "19.  Saint-Etienne     3\n",
       "20.  Nîmes             3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {
    "id": "-DO4jPBqDDPo"
   },
   "outputs": [],
   "source": [
    "df2 = df2.rename_axis('Equipe t').reset_index() # les noms des équipes sont dans l'index, on crée une colonne à partir de celui-ci pur pouvoir obtenir in fine une colonnne avec le nom des équipes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "5xMsXNTsDEi0",
    "outputId": "71f8f208-3f41-4705-8e9a-38584b086ae4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe t</th>\n",
       "      <th>Forme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.  Lyon</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.  Marseille</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.  Monaco</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.  Brest</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.  Montpellier</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.  Lille</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.  Paris</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8.  Angers</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.  Bordeaux</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10.  Dijon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11.  Nice</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12.  Lens</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13.  Rennes</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.  Metz</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15.  Nantes</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.  Strasbourg</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17.  Reims</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.  Lorient</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.  Saint-Etienne</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20.  Nîmes</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Equipe t Forme\n",
       "0             1.  Lyon    18\n",
       "1        2.  Marseille    18\n",
       "2           3.  Monaco    12\n",
       "3            4.  Brest    12\n",
       "4      5.  Montpellier    12\n",
       "5            6.  Lille    11\n",
       "6            7.  Paris    10\n",
       "7           8.  Angers    10\n",
       "8         9.  Bordeaux    10\n",
       "9           10.  Dijon     7\n",
       "10           11.  Nice     7\n",
       "11           12.  Lens     7\n",
       "12         13.  Rennes     7\n",
       "13           14.  Metz     6\n",
       "14         15.  Nantes     6\n",
       "15     16.  Strasbourg     5\n",
       "16          17.  Reims     5\n",
       "17        18.  Lorient     4\n",
       "18  19.  Saint-Etienne     3\n",
       "19          20.  Nîmes     3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "hD3-jbEG40y1",
    "outputId": "0c9597fe-3cfb-42c1-c71d-16767a291206"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Forme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brest</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lille</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Paris</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Nice</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lens</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Reims</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Saint-Etienne</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Equipe Forme\n",
       "0             Lyon    18\n",
       "1        Marseille    18\n",
       "2           Monaco    12\n",
       "3            Brest    12\n",
       "4      Montpellier    12\n",
       "5            Lille    11\n",
       "6            Paris    10\n",
       "7           Angers    10\n",
       "8         Bordeaux    10\n",
       "9            Dijon     7\n",
       "10            Nice     7\n",
       "11            Lens     7\n",
       "12          Rennes     7\n",
       "13            Metz     6\n",
       "14          Nantes     6\n",
       "15      Strasbourg     5\n",
       "16           Reims     5\n",
       "17         Lorient     4\n",
       "18   Saint-Etienne     3\n",
       "19           Nîmes     3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "new = df2[\"Equipe t\"].str.split(\". \", n = 1, expand = True) # on crée une nouvelle liste avec deux élémets à chaque fois, en séparant 1. et Lyon par exemple\n",
    "df2[\"Drop\"]= new[0]\n",
    "df2[\"Equipe\"]= new[1] # on nommme les deux sous-listes obtenues\n",
    "df2.drop(columns =[\"Equipe t\"], inplace = True) \n",
    "df2.drop(columns =['Drop'], inplace=True) # on construit deux nouvelles colonnes du dataframe avec ces sous-listes\n",
    "df2=df2[['Equipe', 'Forme']] # on ne garde que les colonnes qui nous intéressent\n",
    "display(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "y6qWTlEHH58Q",
    "outputId": "ddc45afa-e7e3-4af5-c191-90eab4507344"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Forme</th>\n",
       "      <th>MForme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brest</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lille</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Paris</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Nice</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lens</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Reims</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Saint-Etienne</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Equipe Forme  MForme\n",
       "0             Lyon    18       1\n",
       "1        Marseille    18       1\n",
       "2           Monaco    12       1\n",
       "3            Brest    12       1\n",
       "4      Montpellier    12       1\n",
       "5            Lille    11       1\n",
       "6            Paris    10       1\n",
       "7           Angers    10       1\n",
       "8         Bordeaux    10       1\n",
       "9            Dijon     7       1\n",
       "10            Nice     7       1\n",
       "11            Lens     7       1\n",
       "12          Rennes     7       1\n",
       "13            Metz     6       1\n",
       "14          Nantes     6       1\n",
       "15      Strasbourg     5       1\n",
       "16           Reims     5       1\n",
       "17         Lorient     4       1\n",
       "18   Saint-Etienne     3       1\n",
       "19           Nîmes     3       1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2['MForme']=1\n",
    "display(df2) # on crée la colonne forme moyenne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 634
    },
    "id": "qZynFEqoKmvV",
    "outputId": "80967cb1-341d-4d9b-b0c5-83cd372d4444"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Forme</th>\n",
       "      <th>MForme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>18</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>18</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brest</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lille</td>\n",
       "      <td>11</td>\n",
       "      <td>1.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Paris</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Angers</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Nice</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lens</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Metz</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>5</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Reims</td>\n",
       "      <td>5</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>4</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Saint-Etienne</td>\n",
       "      <td>3</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>3</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Equipe  Forme    MForme\n",
       "0             Lyon     18  3.000000\n",
       "1        Marseille     18  3.000000\n",
       "2           Monaco     12  2.000000\n",
       "3            Brest     12  2.000000\n",
       "4      Montpellier     12  2.000000\n",
       "5            Lille     11  1.833333\n",
       "6            Paris     10  1.666667\n",
       "7           Angers     10  1.666667\n",
       "8         Bordeaux     10  1.666667\n",
       "9            Dijon      7  1.166667\n",
       "10            Nice      7  1.166667\n",
       "11            Lens      7  1.166667\n",
       "12          Rennes      7  1.166667\n",
       "13            Metz      6  1.000000\n",
       "14          Nantes      6  1.000000\n",
       "15      Strasbourg      5  0.833333\n",
       "16           Reims      5  0.833333\n",
       "17         Lorient      4  0.666667\n",
       "18   Saint-Etienne      3  0.500000\n",
       "19           Nîmes      3  0.500000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2['Forme'] = df2['Forme'].astype(int)\n",
    "df2['MForme'] = df2['Forme']/6 #Ici, notre forme moyenne est constituée des 6 derniers matchs, et non pas des 5 derniers.\n",
    "# Une fois de plus, cela changera très peu nos résultats : cela rend juste l'indicateur de forme un peu moins variable.\n",
    "display(df2) # on rempli la colonne forme moyenne  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {
    "id": "prBQawcfF9D9"
   },
   "outputs": [],
   "source": [
    "# Il semble que des espaces dans les noms des équipes du deuxième dataframe empêchent le merge correct ci dessous.\n",
    "# On les supprime donc avec cette fonction appliquée à la colonne 'Equipe' du deuxième dataframe\n",
    "def remove_whitespace(x):\n",
    "    try:\n",
    "        x = \"\".join(x.split())\n",
    "    except:\n",
    "        pass\n",
    "    return x\n",
    "df2.Equipe = df2.Equipe.apply(remove_whitespace)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 604
    },
    "id": "sJlKUKjN9e3n",
    "outputId": "58a29c01-1e1a-4f0e-ede6-46ad8121f1ec"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Equipe</th>\n",
       "      <th>Points</th>\n",
       "      <th>Matchs joués</th>\n",
       "      <th>PtsAvg</th>\n",
       "      <th>Forme</th>\n",
       "      <th>MForme</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lille</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>11</td>\n",
       "      <td>1.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>18</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Paris</td>\n",
       "      <td>28</td>\n",
       "      <td>14</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Marseille</td>\n",
       "      <td>27</td>\n",
       "      <td>12</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>18</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>26</td>\n",
       "      <td>14</td>\n",
       "      <td>1.857143</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>1.642857</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Angers</td>\n",
       "      <td>23</td>\n",
       "      <td>14</td>\n",
       "      <td>1.642857</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>1.571429</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lens</td>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>1.615385</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Brest</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>12</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>19</td>\n",
       "      <td>14</td>\n",
       "      <td>1.357143</td>\n",
       "      <td>10</td>\n",
       "      <td>1.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Nice</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>1.384615</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Metz</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>1.214286</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Nantes</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Saint-Etienne</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>3</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>5</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Lorient</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>4</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>3</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Reims</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>5</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>7</td>\n",
       "      <td>1.166667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Equipe  Points  Matchs joués    PtsAvg  Forme    MForme\n",
       "0           Lille      29            14  2.071429     11  1.833333\n",
       "1            Lyon      29            14  2.071429     18  3.000000\n",
       "2           Paris      28            14  2.000000     10  1.666667\n",
       "3       Marseille      27            12  2.250000     18  3.000000\n",
       "4     Montpellier      26            14  1.857143     12  2.000000\n",
       "5          Monaco      23            14  1.642857     12  2.000000\n",
       "6          Angers      23            14  1.642857     10  1.666667\n",
       "7          Rennes      22            14  1.571429      7  1.166667\n",
       "8            Lens      21            13  1.615385      7  1.166667\n",
       "9           Brest      21            14  1.500000     12  2.000000\n",
       "10       Bordeaux      19            14  1.357143     10  1.666667\n",
       "11           Nice      18            13  1.384615      7  1.166667\n",
       "12           Metz      17            14  1.214286      6  1.000000\n",
       "13         Nantes      14            14  1.000000      6  1.000000\n",
       "14  Saint-Etienne      13            14  0.928571      3  0.500000\n",
       "15     Strasbourg      11            14  0.785714      5  0.833333\n",
       "16        Lorient      11            14  0.785714      4  0.666667\n",
       "17          Nîmes      11            14  0.785714      3  0.500000\n",
       "18          Reims      10            14  0.714286      5  0.833333\n",
       "19          Dijon       9            14  0.642857      7  1.166667"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# on merge les deux dataframe selon les colonnes (identiques) 'Equipe'. Et on trie par nombre de points décroissants pour avoir le classement en temps réel.\n",
    "df = df.merge(df2, left_on='Equipe', right_on='Equipe', sort=False)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant que nous avons scrappé les données qui nous intéréssent, nous n'avons plus qu'à implémenter une fonction qui va chercher les données pertinente et les applique à notre modèle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 575,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Paris</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lyon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.45</td>\n",
       "      <td>2.53</td>\n",
       "      <td>2.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Paris   Nul  Lyon\n",
       "0   2.45  2.53  2.68"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Paris</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lyon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.86</td>\n",
       "      <td>2.99</td>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Paris   Nul  Lyon\n",
       "0   1.86  2.99   3.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def bet(hometeam, awayteam, model = clf): # Ici nous laissons le choix du modèle, même si celui par défaut est le clf.\n",
    "    X = [float(df[df['Equipe']==hometeam]['PtsAvg']), float(df[df['Equipe']==awayteam]['PtsAvg']), float(df[df['Equipe']==hometeam]['MForme']), float(df[df['Equipe']==awayteam]['MForme'])]\n",
    "    # On créée un DataFrame exploitable par la fonction predict_proba\n",
    "    v = model.predict_proba(pd.DataFrame(X).transpose()) # On applique notre modèle\n",
    "    \n",
    "    return(round(0.85/pd.DataFrame({hometeam : [v[0][2]], 'Nul': [v[0][1]], awayteam : [v[0][0]]}), 2)) # Attention, une fois de plus, l'equipe à l'extérieur a sa probabilité de victoire affichée en premier par la fonction predict.\n",
    "\n",
    "    # On peut alors renvoyer les côtes joliement arrondies\n",
    "\n",
    "display(bet('Paris','Lyon'),(bet('Paris','Lyon', lr)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous voyons bien qu'ici, les côtes fournies par le modèle clf semblent plus réalistes. clf est d'ailleurs le modèle qui pouvait le mieux sentir venir la victoire récente de Lyon contre Paris. Cependant, il faut garder à l'esprit que nous pouvons toujours utiliser d'autres modèles si l'envie nous prend."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B) Obtenir les prédictions de notre modèle pour les matchs de la semaine.\n",
    "\n",
    "Pour finir, nous allons construire une ultime fonction qui nous permettra de nous donner les côtes prédites par notre modèle pour les matchs de la semaine. Une fois de plus, comme les données change toutes les semaines, Nous allons devoir effectuer du webscrapping."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 576,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<div class=\"calendarResult\">\n",
       "<table cellpadding=\"0\" cellspacing=\"0\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th class=\"tl\" colspan=\"3\">mercredi 16 décembre 2020</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/angers\">Angers</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  19h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/strasbourg\">Strasbourg</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/dijon\">Dijon</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  19h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/lille\">Lille</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/montpellier\">Montpellier</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  19h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/fc-metz\">FC Metz</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/nimes\">Nîmes</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  19h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/nice\">Nice</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/reims\">Reims</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  19h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/nantes\">Nantes</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/bordeaux\">Bordeaux</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  21h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/saint-etienne\">Saint-Étienne</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/lyon\">Lyon</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  21h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/brest\">Brest</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/monaco\">Monaco</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  21h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/lens\">Lens</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/paris-sg\">Paris SG</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  21h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/lorient\">Lorient</a>\n",
       "</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td class=\"firstTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/rennes\">Rennes</a>\n",
       "</td>\n",
       "<td class=\"scoreData\">  21h00 </td>\n",
       "<td class=\"secondTeam\">\n",
       "<a href=\"/sport/equipe/football/national-ligue-1/marseille\">Marseille</a>\n",
       "</td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "url_ligue_1=\"https://www.bienpublic.com/sport/calendrier-resultats/football/national-ligue-1\"\n",
    "from urllib import request\n",
    "request_text = request.urlopen(url_ligue_1).read()\n",
    "page = bs4.BeautifulSoup(request_text, \"lxml\")\n",
    "matchs = page.find('div', {'class' : 'calendarResult'})\n",
    "display(matchs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 577,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows_2 = matchs.find_all('tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 578,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Angers': ['Strasbourg'],\n",
       " 'Dijon': ['Lille'],\n",
       " 'Montpellier': ['FC Metz'],\n",
       " 'Nîmes': ['Nice'],\n",
       " 'Reims': ['Nantes'],\n",
       " 'Bordeaux': ['Saint-Étienne'],\n",
       " 'Lyon': ['Brest'],\n",
       " 'Monaco': ['Lens'],\n",
       " 'Paris SG': ['Lorient'],\n",
       " 'Rennes': ['Marseille']}"
      ]
     },
     "execution_count": 578,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dico_matchs = dict()\n",
    "for row in rows_2:\n",
    "    cols = row.find_all('a')\n",
    "    cols = [ele.text.strip() for ele in cols]\n",
    "    if len(cols) > 0 : \n",
    "        dico_matchs[cols[0]] = cols[1:]\n",
    "dico_matchs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 579,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Angers</th>\n",
       "      <td>Strasbourg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dijon</th>\n",
       "      <td>Lille</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Montpellier</th>\n",
       "      <td>FC Metz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nîmes</th>\n",
       "      <td>Nice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reims</th>\n",
       "      <td>Nantes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bordeaux</th>\n",
       "      <td>Saint-Étienne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lyon</th>\n",
       "      <td>Brest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monaco</th>\n",
       "      <td>Lens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paris SG</th>\n",
       "      <td>Lorient</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rennes</th>\n",
       "      <td>Marseille</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         0\n",
       "Angers          Strasbourg\n",
       "Dijon                Lille\n",
       "Montpellier        FC Metz\n",
       "Nîmes                 Nice\n",
       "Reims               Nantes\n",
       "Bordeaux     Saint-Étienne\n",
       "Lyon                 Brest\n",
       "Monaco                Lens\n",
       "Paris SG           Lorient\n",
       "Rennes           Marseille"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_matchs  = pd.DataFrame.from_dict(dico_matchs,orient='index')\n",
    "display(df_matchs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 580,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_matchs['HomeTeam'] = df_matchs.index\n",
    "df_matchs = df_matchs.rename(columns = {0: 'AwayTeam'})\n",
    "df_matchs.index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 581,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Angers</td>\n",
       "      <td>Strasbourg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dijon</td>\n",
       "      <td>Lille</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Montpellier</td>\n",
       "      <td>Metz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Nîmes</td>\n",
       "      <td>Nice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Reims</td>\n",
       "      <td>Nantes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Saint-Etienne</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lyon</td>\n",
       "      <td>Brest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Monaco</td>\n",
       "      <td>Lens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Paris</td>\n",
       "      <td>Lorient</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Rennes</td>\n",
       "      <td>Marseille</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HomeTeam       AwayTeam\n",
       "1        Angers     Strasbourg\n",
       "2         Dijon          Lille\n",
       "3   Montpellier           Metz\n",
       "4         Nîmes           Nice\n",
       "5         Reims         Nantes\n",
       "6      Bordeaux  Saint-Etienne\n",
       "7          Lyon          Brest\n",
       "8        Monaco           Lens\n",
       "9         Paris        Lorient\n",
       "10       Rennes      Marseille"
      ]
     },
     "execution_count": 581,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_matchs = df_matchs.replace(['Paris SG','FC Metz','Saint-Étienne'], ['Paris','Metz','Saint-Etienne'])\n",
    "# On change les noms des équipes afin de pouvoir retrouver chaque équipe dans notre DataFrame de features.\n",
    "df_matchs = df_matchs[['HomeTeam','AwayTeam']] # On remet les colonnes dans l'ordre, par soucis d'esthétisme\n",
    "df_matchs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 583,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Angers</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Strasbourg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.48</td>\n",
       "      <td>2.57</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Angers   Nul  Strasbourg\n",
       "0    2.48  2.57         2.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dijon</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lille</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.55</td>\n",
       "      <td>2.59</td>\n",
       "      <td>2.51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Dijon   Nul  Lille\n",
       "0   2.55  2.59   2.51"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Montpellier</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Metz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.52</td>\n",
       "      <td>2.57</td>\n",
       "      <td>2.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Montpellier   Nul  Metz\n",
       "0         2.52  2.57  2.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nîmes</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Nice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.53</td>\n",
       "      <td>2.57</td>\n",
       "      <td>2.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Nîmes   Nul  Nice\n",
       "0   2.53  2.57  2.55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reims</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Nantes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.52</td>\n",
       "      <td>2.57</td>\n",
       "      <td>2.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Reims   Nul  Nantes\n",
       "0   2.52  2.57    2.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bordeaux</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Saint-Etienne</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.51</td>\n",
       "      <td>2.56</td>\n",
       "      <td>2.59</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bordeaux   Nul  Saint-Etienne\n",
       "0      2.51  2.56           2.59"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lyon</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Brest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.52</td>\n",
       "      <td>2.53</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Lyon   Nul  Brest\n",
       "0  2.52  2.53    2.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Monaco</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lens</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.53</td>\n",
       "      <td>2.55</td>\n",
       "      <td>2.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Monaco   Nul  Lens\n",
       "0    2.53  2.55  2.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Paris</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lorient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>2.56</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Paris   Nul  Lorient\n",
       "0    2.5  2.56      2.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rennes</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Marseille</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.52</td>\n",
       "      <td>2.51</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rennes   Nul  Marseille\n",
       "0    2.52  2.51       2.63"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def bet_semaine(model=clf):\n",
    "    for hometeam in df_matchs['HomeTeam']:\n",
    "        for awayteam in df_matchs[df_matchs['HomeTeam']==hometeam]['AwayTeam']: # Nous n'avons trouvé que cette formulation\n",
    "            # Pour extraire proprement la valeur de awayteam\n",
    "            display(bet(hometeam,awayteam, model))\n",
    "            \n",
    "bet_semaine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On voit que nos côtes sont finalement assez peu réalistes : notre modèle ne \"se mouille\" que très peu et considère souvent que les probabilités sont proches de 0.33, 0.33, 0.33 : peut être est il bon pour les prédictions, mais il renvoie des probabilités assez éloignées de la réalité. Nous ne pouvions évaluer cet aspect avec les métriques classiques de skicit learn : justement : on observe un résultat et on ne pourra jamais vraiment évaluer les probabilités réelles, donc cette fonctionnalité est assez dure à évaluer.\n",
    "Pour avoir des côtes plus ressemblantes à la réalité, essayons plutôt notre modèle lr :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 584,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Angers</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Strasbourg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.32</td>\n",
       "      <td>3.89</td>\n",
       "      <td>6.23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Angers   Nul  Strasbourg\n",
       "0    1.32  3.89        6.23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dijon</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lille</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.26</td>\n",
       "      <td>3.77</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Dijon   Nul  Lille\n",
       "0   4.26  3.77   1.48"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Montpellier</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Metz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.37</td>\n",
       "      <td>3.94</td>\n",
       "      <td>5.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Montpellier   Nul  Metz\n",
       "0         1.37  3.94  5.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nîmes</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Nice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.52</td>\n",
       "      <td>3.21</td>\n",
       "      <td>2.14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Nîmes   Nul  Nice\n",
       "0   2.52  3.21  2.14"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reims</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Nantes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.13</td>\n",
       "      <td>3.15</td>\n",
       "      <td>2.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Reims   Nul  Nantes\n",
       "0   2.13  3.15    2.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bordeaux</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Saint-Etienne</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.48</td>\n",
       "      <td>3.76</td>\n",
       "      <td>4.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bordeaux   Nul  Saint-Etienne\n",
       "0      1.48  3.76           4.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lyon</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Brest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.39</td>\n",
       "      <td>3.77</td>\n",
       "      <td>5.26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Lyon   Nul  Brest\n",
       "0  1.39  3.77   5.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Monaco</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lens</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.68</td>\n",
       "      <td>3.66</td>\n",
       "      <td>3.23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Monaco   Nul  Lens\n",
       "0    1.68  3.66  3.23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Paris</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Lorient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.2</td>\n",
       "      <td>4.43</td>\n",
       "      <td>8.62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Paris   Nul  Lorient\n",
       "0    1.2  4.43     8.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rennes</th>\n",
       "      <th>Nul</th>\n",
       "      <th>Marseille</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.58</td>\n",
       "      <td>2.94</td>\n",
       "      <td>2.23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rennes   Nul  Marseille\n",
       "0    2.58  2.94       2.23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bet_semaine(lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "   Les côtes prédites semblent désormais beaucoup plus réalistes et proches de ce qui se fait sur les sites de paris sportifs. Peut-être que la regression linéaire est meilleure dans cet exercice : cela sera dur à évaluer.\n",
    "   A chacun de choisir le modèle qu'il préfère..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Projet Python Final",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
